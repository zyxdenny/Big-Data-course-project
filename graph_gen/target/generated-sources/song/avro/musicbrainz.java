/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package song.avro;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@org.apache.avro.specific.AvroGenerated
public class musicbrainz extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -8598724663657439413L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"musicbrainz\",\"namespace\":\"song.avro\",\"fields\":[{\"name\":\"artist_mbtags\",\"type\":[\"null\",{\"type\":\"array\",\"items\":\"string\",\"default\":[]}]},{\"name\":\"artist_mbtags_count\",\"type\":[\"null\",{\"type\":\"array\",\"items\":\"int\",\"default\":[]}]},{\"name\":\"songs\",\"type\":{\"type\":\"record\",\"name\":\"musicbrainz_songs\",\"fields\":[{\"name\":\"idx_artist_mbtags\",\"type\":[\"null\",{\"type\":\"array\",\"items\":\"int\",\"default\":[]}]},{\"name\":\"year\",\"type\":[\"null\",{\"type\":\"array\",\"items\":\"int\",\"default\":[]}]}]}}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<musicbrainz> ENCODER =
      new BinaryMessageEncoder<musicbrainz>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<musicbrainz> DECODER =
      new BinaryMessageDecoder<musicbrainz>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<musicbrainz> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<musicbrainz> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<musicbrainz> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<musicbrainz>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this musicbrainz to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a musicbrainz from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a musicbrainz instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static musicbrainz fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

   private java.util.List<java.lang.CharSequence> artist_mbtags;
   private java.util.List<java.lang.Integer> artist_mbtags_count;
   private song.avro.musicbrainz_songs songs;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public musicbrainz() {}

  /**
   * All-args constructor.
   * @param artist_mbtags The new value for artist_mbtags
   * @param artist_mbtags_count The new value for artist_mbtags_count
   * @param songs The new value for songs
   */
  public musicbrainz(java.util.List<java.lang.CharSequence> artist_mbtags, java.util.List<java.lang.Integer> artist_mbtags_count, song.avro.musicbrainz_songs songs) {
    this.artist_mbtags = artist_mbtags;
    this.artist_mbtags_count = artist_mbtags_count;
    this.songs = songs;
  }

  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return artist_mbtags;
    case 1: return artist_mbtags_count;
    case 2: return songs;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: artist_mbtags = (java.util.List<java.lang.CharSequence>)value$; break;
    case 1: artist_mbtags_count = (java.util.List<java.lang.Integer>)value$; break;
    case 2: songs = (song.avro.musicbrainz_songs)value$; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'artist_mbtags' field.
   * @return The value of the 'artist_mbtags' field.
   */
  public java.util.List<java.lang.CharSequence> getArtistMbtags() {
    return artist_mbtags;
  }


  /**
   * Sets the value of the 'artist_mbtags' field.
   * @param value the value to set.
   */
  public void setArtistMbtags(java.util.List<java.lang.CharSequence> value) {
    this.artist_mbtags = value;
  }

  /**
   * Gets the value of the 'artist_mbtags_count' field.
   * @return The value of the 'artist_mbtags_count' field.
   */
  public java.util.List<java.lang.Integer> getArtistMbtagsCount() {
    return artist_mbtags_count;
  }


  /**
   * Sets the value of the 'artist_mbtags_count' field.
   * @param value the value to set.
   */
  public void setArtistMbtagsCount(java.util.List<java.lang.Integer> value) {
    this.artist_mbtags_count = value;
  }

  /**
   * Gets the value of the 'songs' field.
   * @return The value of the 'songs' field.
   */
  public song.avro.musicbrainz_songs getSongs() {
    return songs;
  }


  /**
   * Sets the value of the 'songs' field.
   * @param value the value to set.
   */
  public void setSongs(song.avro.musicbrainz_songs value) {
    this.songs = value;
  }

  /**
   * Creates a new musicbrainz RecordBuilder.
   * @return A new musicbrainz RecordBuilder
   */
  public static song.avro.musicbrainz.Builder newBuilder() {
    return new song.avro.musicbrainz.Builder();
  }

  /**
   * Creates a new musicbrainz RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new musicbrainz RecordBuilder
   */
  public static song.avro.musicbrainz.Builder newBuilder(song.avro.musicbrainz.Builder other) {
    if (other == null) {
      return new song.avro.musicbrainz.Builder();
    } else {
      return new song.avro.musicbrainz.Builder(other);
    }
  }

  /**
   * Creates a new musicbrainz RecordBuilder by copying an existing musicbrainz instance.
   * @param other The existing instance to copy.
   * @return A new musicbrainz RecordBuilder
   */
  public static song.avro.musicbrainz.Builder newBuilder(song.avro.musicbrainz other) {
    if (other == null) {
      return new song.avro.musicbrainz.Builder();
    } else {
      return new song.avro.musicbrainz.Builder(other);
    }
  }

  /**
   * RecordBuilder for musicbrainz instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<musicbrainz>
    implements org.apache.avro.data.RecordBuilder<musicbrainz> {

    private java.util.List<java.lang.CharSequence> artist_mbtags;
    private java.util.List<java.lang.Integer> artist_mbtags_count;
    private song.avro.musicbrainz_songs songs;
    private song.avro.musicbrainz_songs.Builder songsBuilder;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(song.avro.musicbrainz.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.artist_mbtags)) {
        this.artist_mbtags = data().deepCopy(fields()[0].schema(), other.artist_mbtags);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.artist_mbtags_count)) {
        this.artist_mbtags_count = data().deepCopy(fields()[1].schema(), other.artist_mbtags_count);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.songs)) {
        this.songs = data().deepCopy(fields()[2].schema(), other.songs);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (other.hasSongsBuilder()) {
        this.songsBuilder = song.avro.musicbrainz_songs.newBuilder(other.getSongsBuilder());
      }
    }

    /**
     * Creates a Builder by copying an existing musicbrainz instance
     * @param other The existing instance to copy.
     */
    private Builder(song.avro.musicbrainz other) {
      super(SCHEMA$);
      if (isValidValue(fields()[0], other.artist_mbtags)) {
        this.artist_mbtags = data().deepCopy(fields()[0].schema(), other.artist_mbtags);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.artist_mbtags_count)) {
        this.artist_mbtags_count = data().deepCopy(fields()[1].schema(), other.artist_mbtags_count);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.songs)) {
        this.songs = data().deepCopy(fields()[2].schema(), other.songs);
        fieldSetFlags()[2] = true;
      }
      this.songsBuilder = null;
    }

    /**
      * Gets the value of the 'artist_mbtags' field.
      * @return The value.
      */
    public java.util.List<java.lang.CharSequence> getArtistMbtags() {
      return artist_mbtags;
    }


    /**
      * Sets the value of the 'artist_mbtags' field.
      * @param value The value of 'artist_mbtags'.
      * @return This builder.
      */
    public song.avro.musicbrainz.Builder setArtistMbtags(java.util.List<java.lang.CharSequence> value) {
      validate(fields()[0], value);
      this.artist_mbtags = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'artist_mbtags' field has been set.
      * @return True if the 'artist_mbtags' field has been set, false otherwise.
      */
    public boolean hasArtistMbtags() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'artist_mbtags' field.
      * @return This builder.
      */
    public song.avro.musicbrainz.Builder clearArtistMbtags() {
      artist_mbtags = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'artist_mbtags_count' field.
      * @return The value.
      */
    public java.util.List<java.lang.Integer> getArtistMbtagsCount() {
      return artist_mbtags_count;
    }


    /**
      * Sets the value of the 'artist_mbtags_count' field.
      * @param value The value of 'artist_mbtags_count'.
      * @return This builder.
      */
    public song.avro.musicbrainz.Builder setArtistMbtagsCount(java.util.List<java.lang.Integer> value) {
      validate(fields()[1], value);
      this.artist_mbtags_count = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'artist_mbtags_count' field has been set.
      * @return True if the 'artist_mbtags_count' field has been set, false otherwise.
      */
    public boolean hasArtistMbtagsCount() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'artist_mbtags_count' field.
      * @return This builder.
      */
    public song.avro.musicbrainz.Builder clearArtistMbtagsCount() {
      artist_mbtags_count = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'songs' field.
      * @return The value.
      */
    public song.avro.musicbrainz_songs getSongs() {
      return songs;
    }


    /**
      * Sets the value of the 'songs' field.
      * @param value The value of 'songs'.
      * @return This builder.
      */
    public song.avro.musicbrainz.Builder setSongs(song.avro.musicbrainz_songs value) {
      validate(fields()[2], value);
      this.songsBuilder = null;
      this.songs = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'songs' field has been set.
      * @return True if the 'songs' field has been set, false otherwise.
      */
    public boolean hasSongs() {
      return fieldSetFlags()[2];
    }

    /**
     * Gets the Builder instance for the 'songs' field and creates one if it doesn't exist yet.
     * @return This builder.
     */
    public song.avro.musicbrainz_songs.Builder getSongsBuilder() {
      if (songsBuilder == null) {
        if (hasSongs()) {
          setSongsBuilder(song.avro.musicbrainz_songs.newBuilder(songs));
        } else {
          setSongsBuilder(song.avro.musicbrainz_songs.newBuilder());
        }
      }
      return songsBuilder;
    }

    /**
     * Sets the Builder instance for the 'songs' field
     * @param value The builder instance that must be set.
     * @return This builder.
     */

    public song.avro.musicbrainz.Builder setSongsBuilder(song.avro.musicbrainz_songs.Builder value) {
      clearSongs();
      songsBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'songs' field has an active Builder instance
     * @return True if the 'songs' field has an active Builder instance
     */
    public boolean hasSongsBuilder() {
      return songsBuilder != null;
    }

    /**
      * Clears the value of the 'songs' field.
      * @return This builder.
      */
    public song.avro.musicbrainz.Builder clearSongs() {
      songs = null;
      songsBuilder = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public musicbrainz build() {
      try {
        musicbrainz record = new musicbrainz();
        record.artist_mbtags = fieldSetFlags()[0] ? this.artist_mbtags : (java.util.List<java.lang.CharSequence>) defaultValue(fields()[0]);
        record.artist_mbtags_count = fieldSetFlags()[1] ? this.artist_mbtags_count : (java.util.List<java.lang.Integer>) defaultValue(fields()[1]);
        if (songsBuilder != null) {
          try {
            record.songs = this.songsBuilder.build();
          } catch (org.apache.avro.AvroMissingFieldException e) {
            e.addParentField(record.getSchema().getField("songs"));
            throw e;
          }
        } else {
          record.songs = fieldSetFlags()[2] ? this.songs : (song.avro.musicbrainz_songs) defaultValue(fields()[2]);
        }
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<musicbrainz>
    WRITER$ = (org.apache.avro.io.DatumWriter<musicbrainz>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<musicbrainz>
    READER$ = (org.apache.avro.io.DatumReader<musicbrainz>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override protected boolean hasCustomCoders() { return true; }

  @Override public void customEncode(org.apache.avro.io.Encoder out)
    throws java.io.IOException
  {
    if (this.artist_mbtags == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      long size0 = this.artist_mbtags.size();
      out.writeArrayStart();
      out.setItemCount(size0);
      long actualSize0 = 0;
      for (java.lang.CharSequence e0: this.artist_mbtags) {
        actualSize0++;
        out.startItem();
        out.writeString(e0);
      }
      out.writeArrayEnd();
      if (actualSize0 != size0)
        throw new java.util.ConcurrentModificationException("Array-size written was " + size0 + ", but element count was " + actualSize0 + ".");
    }

    if (this.artist_mbtags_count == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      long size1 = this.artist_mbtags_count.size();
      out.writeArrayStart();
      out.setItemCount(size1);
      long actualSize1 = 0;
      for (java.lang.Integer e1: this.artist_mbtags_count) {
        actualSize1++;
        out.startItem();
        out.writeInt(e1);
      }
      out.writeArrayEnd();
      if (actualSize1 != size1)
        throw new java.util.ConcurrentModificationException("Array-size written was " + size1 + ", but element count was " + actualSize1 + ".");
    }

    this.songs.customEncode(out);

  }

  @Override public void customDecode(org.apache.avro.io.ResolvingDecoder in)
    throws java.io.IOException
  {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      if (in.readIndex() != 1) {
        in.readNull();
        this.artist_mbtags = null;
      } else {
        long size0 = in.readArrayStart();
        java.util.List<java.lang.CharSequence> a0 = this.artist_mbtags;
        if (a0 == null) {
          a0 = new SpecificData.Array<java.lang.CharSequence>((int)size0, SCHEMA$.getField("artist_mbtags").schema().getTypes().get(1));
          this.artist_mbtags = a0;
        } else a0.clear();
        SpecificData.Array<java.lang.CharSequence> ga0 = (a0 instanceof SpecificData.Array ? (SpecificData.Array<java.lang.CharSequence>)a0 : null);
        for ( ; 0 < size0; size0 = in.arrayNext()) {
          for ( ; size0 != 0; size0--) {
            java.lang.CharSequence e0 = (ga0 != null ? ga0.peek() : null);
            e0 = in.readString(e0 instanceof Utf8 ? (Utf8)e0 : null);
            a0.add(e0);
          }
        }
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.artist_mbtags_count = null;
      } else {
        long size1 = in.readArrayStart();
        java.util.List<java.lang.Integer> a1 = this.artist_mbtags_count;
        if (a1 == null) {
          a1 = new SpecificData.Array<java.lang.Integer>((int)size1, SCHEMA$.getField("artist_mbtags_count").schema().getTypes().get(1));
          this.artist_mbtags_count = a1;
        } else a1.clear();
        SpecificData.Array<java.lang.Integer> ga1 = (a1 instanceof SpecificData.Array ? (SpecificData.Array<java.lang.Integer>)a1 : null);
        for ( ; 0 < size1; size1 = in.arrayNext()) {
          for ( ; size1 != 0; size1--) {
            java.lang.Integer e1 = (ga1 != null ? ga1.peek() : null);
            e1 = in.readInt();
            a1.add(e1);
          }
        }
      }

      if (this.songs == null) {
        this.songs = new song.avro.musicbrainz_songs();
      }
      this.songs.customDecode(in);

    } else {
      for (int i = 0; i < 3; i++) {
        switch (fieldOrder[i].pos()) {
        case 0:
          if (in.readIndex() != 1) {
            in.readNull();
            this.artist_mbtags = null;
          } else {
            long size0 = in.readArrayStart();
            java.util.List<java.lang.CharSequence> a0 = this.artist_mbtags;
            if (a0 == null) {
              a0 = new SpecificData.Array<java.lang.CharSequence>((int)size0, SCHEMA$.getField("artist_mbtags").schema().getTypes().get(1));
              this.artist_mbtags = a0;
            } else a0.clear();
            SpecificData.Array<java.lang.CharSequence> ga0 = (a0 instanceof SpecificData.Array ? (SpecificData.Array<java.lang.CharSequence>)a0 : null);
            for ( ; 0 < size0; size0 = in.arrayNext()) {
              for ( ; size0 != 0; size0--) {
                java.lang.CharSequence e0 = (ga0 != null ? ga0.peek() : null);
                e0 = in.readString(e0 instanceof Utf8 ? (Utf8)e0 : null);
                a0.add(e0);
              }
            }
          }
          break;

        case 1:
          if (in.readIndex() != 1) {
            in.readNull();
            this.artist_mbtags_count = null;
          } else {
            long size1 = in.readArrayStart();
            java.util.List<java.lang.Integer> a1 = this.artist_mbtags_count;
            if (a1 == null) {
              a1 = new SpecificData.Array<java.lang.Integer>((int)size1, SCHEMA$.getField("artist_mbtags_count").schema().getTypes().get(1));
              this.artist_mbtags_count = a1;
            } else a1.clear();
            SpecificData.Array<java.lang.Integer> ga1 = (a1 instanceof SpecificData.Array ? (SpecificData.Array<java.lang.Integer>)a1 : null);
            for ( ; 0 < size1; size1 = in.arrayNext()) {
              for ( ; size1 != 0; size1--) {
                java.lang.Integer e1 = (ga1 != null ? ga1.peek() : null);
                e1 = in.readInt();
                a1.add(e1);
              }
            }
          }
          break;

        case 2:
          if (this.songs == null) {
            this.songs = new song.avro.musicbrainz_songs();
          }
          this.songs.customDecode(in);
          break;

        default:
          throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}










