/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package song.avro;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@org.apache.avro.specific.AvroGenerated
public class analysis extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 4467705196980760992L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"analysis\",\"namespace\":\"song.avro\",\"fields\":[{\"name\":\"bars_confidence\",\"type\":[\"null\",{\"type\":\"array\",\"items\":\"double\",\"default\":[]}]},{\"name\":\"bars_start\",\"type\":[\"null\",{\"type\":\"array\",\"items\":\"double\",\"default\":[]}]},{\"name\":\"beats_confidence\",\"type\":[\"null\",{\"type\":\"array\",\"items\":\"double\",\"default\":[]}]},{\"name\":\"beats_start\",\"type\":[\"null\",{\"type\":\"array\",\"items\":\"double\",\"default\":[]}]},{\"name\":\"sections_confidence\",\"type\":[\"null\",{\"type\":\"array\",\"items\":\"double\",\"default\":[]}]},{\"name\":\"sections_start\",\"type\":[\"null\",{\"type\":\"array\",\"items\":\"double\",\"default\":[]}]},{\"name\":\"segments_confidence\",\"type\":[\"null\",{\"type\":\"array\",\"items\":\"double\",\"default\":[]}]},{\"name\":\"segments_loudness_max\",\"type\":[\"null\",{\"type\":\"array\",\"items\":\"double\",\"default\":[]}]},{\"name\":\"segments_loudness_max_time\",\"type\":[\"null\",{\"type\":\"array\",\"items\":\"double\",\"default\":[]}]},{\"name\":\"segments_loudness_start\",\"type\":[\"null\",{\"type\":\"array\",\"items\":\"double\",\"default\":[]}]},{\"name\":\"segments_pitches\",\"type\":{\"type\":\"array\",\"items\":{\"type\":\"array\",\"items\":\"double\",\"default\":[]},\"default\":\"null\"}},{\"name\":\"segments_start\",\"type\":[\"null\",{\"type\":\"array\",\"items\":\"double\",\"default\":[]}]},{\"name\":\"segments_timbre\",\"type\":{\"type\":\"array\",\"items\":{\"type\":\"array\",\"items\":\"double\",\"default\":[]},\"default\":\"null\"}},{\"name\":\"songs\",\"type\":{\"type\":\"record\",\"name\":\"songs\",\"fields\":[{\"name\":\"analysis_sample_rate\",\"type\":[\"null\",{\"type\":\"array\",\"items\":\"int\",\"default\":[]}]},{\"name\":\"audio_md5\",\"type\":{\"type\":\"array\",\"items\":\"string\",\"default\":[]}},{\"name\":\"danceability\",\"type\":{\"type\":\"array\",\"items\":\"double\",\"default\":[]}},{\"name\":\"duration\",\"type\":{\"type\":\"array\",\"items\":\"double\",\"default\":[]}},{\"name\":\"end_of_fade_in\",\"type\":{\"type\":\"array\",\"items\":\"double\",\"default\":[]}},{\"name\":\"energy\",\"type\":{\"type\":\"array\",\"items\":\"double\",\"default\":[]}},{\"name\":\"idx_bars_confidence\",\"type\":[\"null\",{\"type\":\"array\",\"items\":\"int\",\"default\":[]}]},{\"name\":\"idx_bars_start\",\"type\":[\"null\",{\"type\":\"array\",\"items\":\"int\",\"default\":[]}]},{\"name\":\"idx_beats_confidence\",\"type\":[\"null\",{\"type\":\"array\",\"items\":\"int\",\"default\":[]}]},{\"name\":\"idx_beats_start\",\"type\":[\"null\",{\"type\":\"array\",\"items\":\"int\",\"default\":[]}]},{\"name\":\"idx_sections_confidence\",\"type\":[\"null\",{\"type\":\"array\",\"items\":\"int\",\"default\":[]}]},{\"name\":\"idx_sections_start\",\"type\":[\"null\",{\"type\":\"array\",\"items\":\"int\",\"default\":[]}]},{\"name\":\"idx_segments_confidence\",\"type\":[\"null\",{\"type\":\"array\",\"items\":\"int\",\"default\":[]}]},{\"name\":\"idx_segments_loudness_max\",\"type\":[\"null\",{\"type\":\"array\",\"items\":\"int\",\"default\":[]}]},{\"name\":\"idx_segments_loudness_max_time\",\"type\":[\"null\",{\"type\":\"array\",\"items\":\"int\",\"default\":[]}]},{\"name\":\"idx_segments_loudness_start\",\"type\":[\"null\",{\"type\":\"array\",\"items\":\"int\",\"default\":[]}]},{\"name\":\"idx_segments_pitches\",\"type\":[\"null\",{\"type\":\"array\",\"items\":\"int\",\"default\":[]}]},{\"name\":\"idx_segments_start\",\"type\":[\"null\",{\"type\":\"array\",\"items\":\"int\",\"default\":[]}]},{\"name\":\"idx_segments_timbre\",\"type\":[\"null\",{\"type\":\"array\",\"items\":\"int\",\"default\":[]}]},{\"name\":\"idx_tatums_confidence\",\"type\":[\"null\",{\"type\":\"array\",\"items\":\"int\",\"default\":[]}]},{\"name\":\"idx_tatums_start\",\"type\":[\"null\",{\"type\":\"array\",\"items\":\"int\",\"default\":[]}]},{\"name\":\"key\",\"type\":[\"null\",{\"type\":\"array\",\"items\":\"int\",\"default\":[]}]},{\"name\":\"key_confidence\",\"type\":{\"type\":\"array\",\"items\":\"double\",\"default\":[]}},{\"name\":\"loudness\",\"type\":{\"type\":\"array\",\"items\":\"double\",\"default\":[]}},{\"name\":\"mode\",\"type\":[\"null\",{\"type\":\"array\",\"items\":\"int\",\"default\":[]}]},{\"name\":\"mode_confidence\",\"type\":{\"type\":\"array\",\"items\":\"double\",\"default\":[]}},{\"name\":\"start_of_fade_out\",\"type\":{\"type\":\"array\",\"items\":\"double\",\"default\":[]}},{\"name\":\"tempo\",\"type\":{\"type\":\"array\",\"items\":\"double\",\"default\":[]}},{\"name\":\"time_signature\",\"type\":{\"type\":\"array\",\"items\":\"int\",\"default\":[]}},{\"name\":\"time_signature_confidence\",\"type\":{\"type\":\"array\",\"items\":\"double\",\"default\":[]}},{\"name\":\"track_id\",\"type\":{\"type\":\"array\",\"items\":\"string\",\"default\":[]}}]}},{\"name\":\"tatums_confidence\",\"type\":[\"null\",{\"type\":\"array\",\"items\":\"double\",\"default\":[]}]},{\"name\":\"tatums_start\",\"type\":[\"null\",{\"type\":\"array\",\"items\":\"double\",\"default\":[]}]}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<analysis> ENCODER =
      new BinaryMessageEncoder<analysis>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<analysis> DECODER =
      new BinaryMessageDecoder<analysis>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<analysis> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<analysis> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<analysis> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<analysis>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this analysis to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a analysis from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a analysis instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static analysis fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

   private java.util.List<java.lang.Double> bars_confidence;
   private java.util.List<java.lang.Double> bars_start;
   private java.util.List<java.lang.Double> beats_confidence;
   private java.util.List<java.lang.Double> beats_start;
   private java.util.List<java.lang.Double> sections_confidence;
   private java.util.List<java.lang.Double> sections_start;
   private java.util.List<java.lang.Double> segments_confidence;
   private java.util.List<java.lang.Double> segments_loudness_max;
   private java.util.List<java.lang.Double> segments_loudness_max_time;
   private java.util.List<java.lang.Double> segments_loudness_start;
   private java.util.List<java.util.List<java.lang.Double>> segments_pitches;
   private java.util.List<java.lang.Double> segments_start;
   private java.util.List<java.util.List<java.lang.Double>> segments_timbre;
   private song.avro.songs songs;
   private java.util.List<java.lang.Double> tatums_confidence;
   private java.util.List<java.lang.Double> tatums_start;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public analysis() {}

  /**
   * All-args constructor.
   * @param bars_confidence The new value for bars_confidence
   * @param bars_start The new value for bars_start
   * @param beats_confidence The new value for beats_confidence
   * @param beats_start The new value for beats_start
   * @param sections_confidence The new value for sections_confidence
   * @param sections_start The new value for sections_start
   * @param segments_confidence The new value for segments_confidence
   * @param segments_loudness_max The new value for segments_loudness_max
   * @param segments_loudness_max_time The new value for segments_loudness_max_time
   * @param segments_loudness_start The new value for segments_loudness_start
   * @param segments_pitches The new value for segments_pitches
   * @param segments_start The new value for segments_start
   * @param segments_timbre The new value for segments_timbre
   * @param songs The new value for songs
   * @param tatums_confidence The new value for tatums_confidence
   * @param tatums_start The new value for tatums_start
   */
  public analysis(java.util.List<java.lang.Double> bars_confidence, java.util.List<java.lang.Double> bars_start, java.util.List<java.lang.Double> beats_confidence, java.util.List<java.lang.Double> beats_start, java.util.List<java.lang.Double> sections_confidence, java.util.List<java.lang.Double> sections_start, java.util.List<java.lang.Double> segments_confidence, java.util.List<java.lang.Double> segments_loudness_max, java.util.List<java.lang.Double> segments_loudness_max_time, java.util.List<java.lang.Double> segments_loudness_start, java.util.List<java.util.List<java.lang.Double>> segments_pitches, java.util.List<java.lang.Double> segments_start, java.util.List<java.util.List<java.lang.Double>> segments_timbre, song.avro.songs songs, java.util.List<java.lang.Double> tatums_confidence, java.util.List<java.lang.Double> tatums_start) {
    this.bars_confidence = bars_confidence;
    this.bars_start = bars_start;
    this.beats_confidence = beats_confidence;
    this.beats_start = beats_start;
    this.sections_confidence = sections_confidence;
    this.sections_start = sections_start;
    this.segments_confidence = segments_confidence;
    this.segments_loudness_max = segments_loudness_max;
    this.segments_loudness_max_time = segments_loudness_max_time;
    this.segments_loudness_start = segments_loudness_start;
    this.segments_pitches = segments_pitches;
    this.segments_start = segments_start;
    this.segments_timbre = segments_timbre;
    this.songs = songs;
    this.tatums_confidence = tatums_confidence;
    this.tatums_start = tatums_start;
  }

  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return bars_confidence;
    case 1: return bars_start;
    case 2: return beats_confidence;
    case 3: return beats_start;
    case 4: return sections_confidence;
    case 5: return sections_start;
    case 6: return segments_confidence;
    case 7: return segments_loudness_max;
    case 8: return segments_loudness_max_time;
    case 9: return segments_loudness_start;
    case 10: return segments_pitches;
    case 11: return segments_start;
    case 12: return segments_timbre;
    case 13: return songs;
    case 14: return tatums_confidence;
    case 15: return tatums_start;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: bars_confidence = (java.util.List<java.lang.Double>)value$; break;
    case 1: bars_start = (java.util.List<java.lang.Double>)value$; break;
    case 2: beats_confidence = (java.util.List<java.lang.Double>)value$; break;
    case 3: beats_start = (java.util.List<java.lang.Double>)value$; break;
    case 4: sections_confidence = (java.util.List<java.lang.Double>)value$; break;
    case 5: sections_start = (java.util.List<java.lang.Double>)value$; break;
    case 6: segments_confidence = (java.util.List<java.lang.Double>)value$; break;
    case 7: segments_loudness_max = (java.util.List<java.lang.Double>)value$; break;
    case 8: segments_loudness_max_time = (java.util.List<java.lang.Double>)value$; break;
    case 9: segments_loudness_start = (java.util.List<java.lang.Double>)value$; break;
    case 10: segments_pitches = (java.util.List<java.util.List<java.lang.Double>>)value$; break;
    case 11: segments_start = (java.util.List<java.lang.Double>)value$; break;
    case 12: segments_timbre = (java.util.List<java.util.List<java.lang.Double>>)value$; break;
    case 13: songs = (song.avro.songs)value$; break;
    case 14: tatums_confidence = (java.util.List<java.lang.Double>)value$; break;
    case 15: tatums_start = (java.util.List<java.lang.Double>)value$; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'bars_confidence' field.
   * @return The value of the 'bars_confidence' field.
   */
  public java.util.List<java.lang.Double> getBarsConfidence() {
    return bars_confidence;
  }


  /**
   * Sets the value of the 'bars_confidence' field.
   * @param value the value to set.
   */
  public void setBarsConfidence(java.util.List<java.lang.Double> value) {
    this.bars_confidence = value;
  }

  /**
   * Gets the value of the 'bars_start' field.
   * @return The value of the 'bars_start' field.
   */
  public java.util.List<java.lang.Double> getBarsStart() {
    return bars_start;
  }


  /**
   * Sets the value of the 'bars_start' field.
   * @param value the value to set.
   */
  public void setBarsStart(java.util.List<java.lang.Double> value) {
    this.bars_start = value;
  }

  /**
   * Gets the value of the 'beats_confidence' field.
   * @return The value of the 'beats_confidence' field.
   */
  public java.util.List<java.lang.Double> getBeatsConfidence() {
    return beats_confidence;
  }


  /**
   * Sets the value of the 'beats_confidence' field.
   * @param value the value to set.
   */
  public void setBeatsConfidence(java.util.List<java.lang.Double> value) {
    this.beats_confidence = value;
  }

  /**
   * Gets the value of the 'beats_start' field.
   * @return The value of the 'beats_start' field.
   */
  public java.util.List<java.lang.Double> getBeatsStart() {
    return beats_start;
  }


  /**
   * Sets the value of the 'beats_start' field.
   * @param value the value to set.
   */
  public void setBeatsStart(java.util.List<java.lang.Double> value) {
    this.beats_start = value;
  }

  /**
   * Gets the value of the 'sections_confidence' field.
   * @return The value of the 'sections_confidence' field.
   */
  public java.util.List<java.lang.Double> getSectionsConfidence() {
    return sections_confidence;
  }


  /**
   * Sets the value of the 'sections_confidence' field.
   * @param value the value to set.
   */
  public void setSectionsConfidence(java.util.List<java.lang.Double> value) {
    this.sections_confidence = value;
  }

  /**
   * Gets the value of the 'sections_start' field.
   * @return The value of the 'sections_start' field.
   */
  public java.util.List<java.lang.Double> getSectionsStart() {
    return sections_start;
  }


  /**
   * Sets the value of the 'sections_start' field.
   * @param value the value to set.
   */
  public void setSectionsStart(java.util.List<java.lang.Double> value) {
    this.sections_start = value;
  }

  /**
   * Gets the value of the 'segments_confidence' field.
   * @return The value of the 'segments_confidence' field.
   */
  public java.util.List<java.lang.Double> getSegmentsConfidence() {
    return segments_confidence;
  }


  /**
   * Sets the value of the 'segments_confidence' field.
   * @param value the value to set.
   */
  public void setSegmentsConfidence(java.util.List<java.lang.Double> value) {
    this.segments_confidence = value;
  }

  /**
   * Gets the value of the 'segments_loudness_max' field.
   * @return The value of the 'segments_loudness_max' field.
   */
  public java.util.List<java.lang.Double> getSegmentsLoudnessMax() {
    return segments_loudness_max;
  }


  /**
   * Sets the value of the 'segments_loudness_max' field.
   * @param value the value to set.
   */
  public void setSegmentsLoudnessMax(java.util.List<java.lang.Double> value) {
    this.segments_loudness_max = value;
  }

  /**
   * Gets the value of the 'segments_loudness_max_time' field.
   * @return The value of the 'segments_loudness_max_time' field.
   */
  public java.util.List<java.lang.Double> getSegmentsLoudnessMaxTime() {
    return segments_loudness_max_time;
  }


  /**
   * Sets the value of the 'segments_loudness_max_time' field.
   * @param value the value to set.
   */
  public void setSegmentsLoudnessMaxTime(java.util.List<java.lang.Double> value) {
    this.segments_loudness_max_time = value;
  }

  /**
   * Gets the value of the 'segments_loudness_start' field.
   * @return The value of the 'segments_loudness_start' field.
   */
  public java.util.List<java.lang.Double> getSegmentsLoudnessStart() {
    return segments_loudness_start;
  }


  /**
   * Sets the value of the 'segments_loudness_start' field.
   * @param value the value to set.
   */
  public void setSegmentsLoudnessStart(java.util.List<java.lang.Double> value) {
    this.segments_loudness_start = value;
  }

  /**
   * Gets the value of the 'segments_pitches' field.
   * @return The value of the 'segments_pitches' field.
   */
  public java.util.List<java.util.List<java.lang.Double>> getSegmentsPitches() {
    return segments_pitches;
  }


  /**
   * Sets the value of the 'segments_pitches' field.
   * @param value the value to set.
   */
  public void setSegmentsPitches(java.util.List<java.util.List<java.lang.Double>> value) {
    this.segments_pitches = value;
  }

  /**
   * Gets the value of the 'segments_start' field.
   * @return The value of the 'segments_start' field.
   */
  public java.util.List<java.lang.Double> getSegmentsStart() {
    return segments_start;
  }


  /**
   * Sets the value of the 'segments_start' field.
   * @param value the value to set.
   */
  public void setSegmentsStart(java.util.List<java.lang.Double> value) {
    this.segments_start = value;
  }

  /**
   * Gets the value of the 'segments_timbre' field.
   * @return The value of the 'segments_timbre' field.
   */
  public java.util.List<java.util.List<java.lang.Double>> getSegmentsTimbre() {
    return segments_timbre;
  }


  /**
   * Sets the value of the 'segments_timbre' field.
   * @param value the value to set.
   */
  public void setSegmentsTimbre(java.util.List<java.util.List<java.lang.Double>> value) {
    this.segments_timbre = value;
  }

  /**
   * Gets the value of the 'songs' field.
   * @return The value of the 'songs' field.
   */
  public song.avro.songs getSongs() {
    return songs;
  }


  /**
   * Sets the value of the 'songs' field.
   * @param value the value to set.
   */
  public void setSongs(song.avro.songs value) {
    this.songs = value;
  }

  /**
   * Gets the value of the 'tatums_confidence' field.
   * @return The value of the 'tatums_confidence' field.
   */
  public java.util.List<java.lang.Double> getTatumsConfidence() {
    return tatums_confidence;
  }


  /**
   * Sets the value of the 'tatums_confidence' field.
   * @param value the value to set.
   */
  public void setTatumsConfidence(java.util.List<java.lang.Double> value) {
    this.tatums_confidence = value;
  }

  /**
   * Gets the value of the 'tatums_start' field.
   * @return The value of the 'tatums_start' field.
   */
  public java.util.List<java.lang.Double> getTatumsStart() {
    return tatums_start;
  }


  /**
   * Sets the value of the 'tatums_start' field.
   * @param value the value to set.
   */
  public void setTatumsStart(java.util.List<java.lang.Double> value) {
    this.tatums_start = value;
  }

  /**
   * Creates a new analysis RecordBuilder.
   * @return A new analysis RecordBuilder
   */
  public static song.avro.analysis.Builder newBuilder() {
    return new song.avro.analysis.Builder();
  }

  /**
   * Creates a new analysis RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new analysis RecordBuilder
   */
  public static song.avro.analysis.Builder newBuilder(song.avro.analysis.Builder other) {
    if (other == null) {
      return new song.avro.analysis.Builder();
    } else {
      return new song.avro.analysis.Builder(other);
    }
  }

  /**
   * Creates a new analysis RecordBuilder by copying an existing analysis instance.
   * @param other The existing instance to copy.
   * @return A new analysis RecordBuilder
   */
  public static song.avro.analysis.Builder newBuilder(song.avro.analysis other) {
    if (other == null) {
      return new song.avro.analysis.Builder();
    } else {
      return new song.avro.analysis.Builder(other);
    }
  }

  /**
   * RecordBuilder for analysis instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<analysis>
    implements org.apache.avro.data.RecordBuilder<analysis> {

    private java.util.List<java.lang.Double> bars_confidence;
    private java.util.List<java.lang.Double> bars_start;
    private java.util.List<java.lang.Double> beats_confidence;
    private java.util.List<java.lang.Double> beats_start;
    private java.util.List<java.lang.Double> sections_confidence;
    private java.util.List<java.lang.Double> sections_start;
    private java.util.List<java.lang.Double> segments_confidence;
    private java.util.List<java.lang.Double> segments_loudness_max;
    private java.util.List<java.lang.Double> segments_loudness_max_time;
    private java.util.List<java.lang.Double> segments_loudness_start;
    private java.util.List<java.util.List<java.lang.Double>> segments_pitches;
    private java.util.List<java.lang.Double> segments_start;
    private java.util.List<java.util.List<java.lang.Double>> segments_timbre;
    private song.avro.songs songs;
    private song.avro.songs.Builder songsBuilder;
    private java.util.List<java.lang.Double> tatums_confidence;
    private java.util.List<java.lang.Double> tatums_start;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(song.avro.analysis.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.bars_confidence)) {
        this.bars_confidence = data().deepCopy(fields()[0].schema(), other.bars_confidence);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.bars_start)) {
        this.bars_start = data().deepCopy(fields()[1].schema(), other.bars_start);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.beats_confidence)) {
        this.beats_confidence = data().deepCopy(fields()[2].schema(), other.beats_confidence);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (isValidValue(fields()[3], other.beats_start)) {
        this.beats_start = data().deepCopy(fields()[3].schema(), other.beats_start);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
      if (isValidValue(fields()[4], other.sections_confidence)) {
        this.sections_confidence = data().deepCopy(fields()[4].schema(), other.sections_confidence);
        fieldSetFlags()[4] = other.fieldSetFlags()[4];
      }
      if (isValidValue(fields()[5], other.sections_start)) {
        this.sections_start = data().deepCopy(fields()[5].schema(), other.sections_start);
        fieldSetFlags()[5] = other.fieldSetFlags()[5];
      }
      if (isValidValue(fields()[6], other.segments_confidence)) {
        this.segments_confidence = data().deepCopy(fields()[6].schema(), other.segments_confidence);
        fieldSetFlags()[6] = other.fieldSetFlags()[6];
      }
      if (isValidValue(fields()[7], other.segments_loudness_max)) {
        this.segments_loudness_max = data().deepCopy(fields()[7].schema(), other.segments_loudness_max);
        fieldSetFlags()[7] = other.fieldSetFlags()[7];
      }
      if (isValidValue(fields()[8], other.segments_loudness_max_time)) {
        this.segments_loudness_max_time = data().deepCopy(fields()[8].schema(), other.segments_loudness_max_time);
        fieldSetFlags()[8] = other.fieldSetFlags()[8];
      }
      if (isValidValue(fields()[9], other.segments_loudness_start)) {
        this.segments_loudness_start = data().deepCopy(fields()[9].schema(), other.segments_loudness_start);
        fieldSetFlags()[9] = other.fieldSetFlags()[9];
      }
      if (isValidValue(fields()[10], other.segments_pitches)) {
        this.segments_pitches = data().deepCopy(fields()[10].schema(), other.segments_pitches);
        fieldSetFlags()[10] = other.fieldSetFlags()[10];
      }
      if (isValidValue(fields()[11], other.segments_start)) {
        this.segments_start = data().deepCopy(fields()[11].schema(), other.segments_start);
        fieldSetFlags()[11] = other.fieldSetFlags()[11];
      }
      if (isValidValue(fields()[12], other.segments_timbre)) {
        this.segments_timbre = data().deepCopy(fields()[12].schema(), other.segments_timbre);
        fieldSetFlags()[12] = other.fieldSetFlags()[12];
      }
      if (isValidValue(fields()[13], other.songs)) {
        this.songs = data().deepCopy(fields()[13].schema(), other.songs);
        fieldSetFlags()[13] = other.fieldSetFlags()[13];
      }
      if (other.hasSongsBuilder()) {
        this.songsBuilder = song.avro.songs.newBuilder(other.getSongsBuilder());
      }
      if (isValidValue(fields()[14], other.tatums_confidence)) {
        this.tatums_confidence = data().deepCopy(fields()[14].schema(), other.tatums_confidence);
        fieldSetFlags()[14] = other.fieldSetFlags()[14];
      }
      if (isValidValue(fields()[15], other.tatums_start)) {
        this.tatums_start = data().deepCopy(fields()[15].schema(), other.tatums_start);
        fieldSetFlags()[15] = other.fieldSetFlags()[15];
      }
    }

    /**
     * Creates a Builder by copying an existing analysis instance
     * @param other The existing instance to copy.
     */
    private Builder(song.avro.analysis other) {
      super(SCHEMA$);
      if (isValidValue(fields()[0], other.bars_confidence)) {
        this.bars_confidence = data().deepCopy(fields()[0].schema(), other.bars_confidence);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.bars_start)) {
        this.bars_start = data().deepCopy(fields()[1].schema(), other.bars_start);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.beats_confidence)) {
        this.beats_confidence = data().deepCopy(fields()[2].schema(), other.beats_confidence);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.beats_start)) {
        this.beats_start = data().deepCopy(fields()[3].schema(), other.beats_start);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.sections_confidence)) {
        this.sections_confidence = data().deepCopy(fields()[4].schema(), other.sections_confidence);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.sections_start)) {
        this.sections_start = data().deepCopy(fields()[5].schema(), other.sections_start);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.segments_confidence)) {
        this.segments_confidence = data().deepCopy(fields()[6].schema(), other.segments_confidence);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.segments_loudness_max)) {
        this.segments_loudness_max = data().deepCopy(fields()[7].schema(), other.segments_loudness_max);
        fieldSetFlags()[7] = true;
      }
      if (isValidValue(fields()[8], other.segments_loudness_max_time)) {
        this.segments_loudness_max_time = data().deepCopy(fields()[8].schema(), other.segments_loudness_max_time);
        fieldSetFlags()[8] = true;
      }
      if (isValidValue(fields()[9], other.segments_loudness_start)) {
        this.segments_loudness_start = data().deepCopy(fields()[9].schema(), other.segments_loudness_start);
        fieldSetFlags()[9] = true;
      }
      if (isValidValue(fields()[10], other.segments_pitches)) {
        this.segments_pitches = data().deepCopy(fields()[10].schema(), other.segments_pitches);
        fieldSetFlags()[10] = true;
      }
      if (isValidValue(fields()[11], other.segments_start)) {
        this.segments_start = data().deepCopy(fields()[11].schema(), other.segments_start);
        fieldSetFlags()[11] = true;
      }
      if (isValidValue(fields()[12], other.segments_timbre)) {
        this.segments_timbre = data().deepCopy(fields()[12].schema(), other.segments_timbre);
        fieldSetFlags()[12] = true;
      }
      if (isValidValue(fields()[13], other.songs)) {
        this.songs = data().deepCopy(fields()[13].schema(), other.songs);
        fieldSetFlags()[13] = true;
      }
      this.songsBuilder = null;
      if (isValidValue(fields()[14], other.tatums_confidence)) {
        this.tatums_confidence = data().deepCopy(fields()[14].schema(), other.tatums_confidence);
        fieldSetFlags()[14] = true;
      }
      if (isValidValue(fields()[15], other.tatums_start)) {
        this.tatums_start = data().deepCopy(fields()[15].schema(), other.tatums_start);
        fieldSetFlags()[15] = true;
      }
    }

    /**
      * Gets the value of the 'bars_confidence' field.
      * @return The value.
      */
    public java.util.List<java.lang.Double> getBarsConfidence() {
      return bars_confidence;
    }


    /**
      * Sets the value of the 'bars_confidence' field.
      * @param value The value of 'bars_confidence'.
      * @return This builder.
      */
    public song.avro.analysis.Builder setBarsConfidence(java.util.List<java.lang.Double> value) {
      validate(fields()[0], value);
      this.bars_confidence = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'bars_confidence' field has been set.
      * @return True if the 'bars_confidence' field has been set, false otherwise.
      */
    public boolean hasBarsConfidence() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'bars_confidence' field.
      * @return This builder.
      */
    public song.avro.analysis.Builder clearBarsConfidence() {
      bars_confidence = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'bars_start' field.
      * @return The value.
      */
    public java.util.List<java.lang.Double> getBarsStart() {
      return bars_start;
    }


    /**
      * Sets the value of the 'bars_start' field.
      * @param value The value of 'bars_start'.
      * @return This builder.
      */
    public song.avro.analysis.Builder setBarsStart(java.util.List<java.lang.Double> value) {
      validate(fields()[1], value);
      this.bars_start = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'bars_start' field has been set.
      * @return True if the 'bars_start' field has been set, false otherwise.
      */
    public boolean hasBarsStart() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'bars_start' field.
      * @return This builder.
      */
    public song.avro.analysis.Builder clearBarsStart() {
      bars_start = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'beats_confidence' field.
      * @return The value.
      */
    public java.util.List<java.lang.Double> getBeatsConfidence() {
      return beats_confidence;
    }


    /**
      * Sets the value of the 'beats_confidence' field.
      * @param value The value of 'beats_confidence'.
      * @return This builder.
      */
    public song.avro.analysis.Builder setBeatsConfidence(java.util.List<java.lang.Double> value) {
      validate(fields()[2], value);
      this.beats_confidence = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'beats_confidence' field has been set.
      * @return True if the 'beats_confidence' field has been set, false otherwise.
      */
    public boolean hasBeatsConfidence() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'beats_confidence' field.
      * @return This builder.
      */
    public song.avro.analysis.Builder clearBeatsConfidence() {
      beats_confidence = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'beats_start' field.
      * @return The value.
      */
    public java.util.List<java.lang.Double> getBeatsStart() {
      return beats_start;
    }


    /**
      * Sets the value of the 'beats_start' field.
      * @param value The value of 'beats_start'.
      * @return This builder.
      */
    public song.avro.analysis.Builder setBeatsStart(java.util.List<java.lang.Double> value) {
      validate(fields()[3], value);
      this.beats_start = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'beats_start' field has been set.
      * @return True if the 'beats_start' field has been set, false otherwise.
      */
    public boolean hasBeatsStart() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'beats_start' field.
      * @return This builder.
      */
    public song.avro.analysis.Builder clearBeatsStart() {
      beats_start = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'sections_confidence' field.
      * @return The value.
      */
    public java.util.List<java.lang.Double> getSectionsConfidence() {
      return sections_confidence;
    }


    /**
      * Sets the value of the 'sections_confidence' field.
      * @param value The value of 'sections_confidence'.
      * @return This builder.
      */
    public song.avro.analysis.Builder setSectionsConfidence(java.util.List<java.lang.Double> value) {
      validate(fields()[4], value);
      this.sections_confidence = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'sections_confidence' field has been set.
      * @return True if the 'sections_confidence' field has been set, false otherwise.
      */
    public boolean hasSectionsConfidence() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'sections_confidence' field.
      * @return This builder.
      */
    public song.avro.analysis.Builder clearSectionsConfidence() {
      sections_confidence = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'sections_start' field.
      * @return The value.
      */
    public java.util.List<java.lang.Double> getSectionsStart() {
      return sections_start;
    }


    /**
      * Sets the value of the 'sections_start' field.
      * @param value The value of 'sections_start'.
      * @return This builder.
      */
    public song.avro.analysis.Builder setSectionsStart(java.util.List<java.lang.Double> value) {
      validate(fields()[5], value);
      this.sections_start = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'sections_start' field has been set.
      * @return True if the 'sections_start' field has been set, false otherwise.
      */
    public boolean hasSectionsStart() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'sections_start' field.
      * @return This builder.
      */
    public song.avro.analysis.Builder clearSectionsStart() {
      sections_start = null;
      fieldSetFlags()[5] = false;
      return this;
    }

    /**
      * Gets the value of the 'segments_confidence' field.
      * @return The value.
      */
    public java.util.List<java.lang.Double> getSegmentsConfidence() {
      return segments_confidence;
    }


    /**
      * Sets the value of the 'segments_confidence' field.
      * @param value The value of 'segments_confidence'.
      * @return This builder.
      */
    public song.avro.analysis.Builder setSegmentsConfidence(java.util.List<java.lang.Double> value) {
      validate(fields()[6], value);
      this.segments_confidence = value;
      fieldSetFlags()[6] = true;
      return this;
    }

    /**
      * Checks whether the 'segments_confidence' field has been set.
      * @return True if the 'segments_confidence' field has been set, false otherwise.
      */
    public boolean hasSegmentsConfidence() {
      return fieldSetFlags()[6];
    }


    /**
      * Clears the value of the 'segments_confidence' field.
      * @return This builder.
      */
    public song.avro.analysis.Builder clearSegmentsConfidence() {
      segments_confidence = null;
      fieldSetFlags()[6] = false;
      return this;
    }

    /**
      * Gets the value of the 'segments_loudness_max' field.
      * @return The value.
      */
    public java.util.List<java.lang.Double> getSegmentsLoudnessMax() {
      return segments_loudness_max;
    }


    /**
      * Sets the value of the 'segments_loudness_max' field.
      * @param value The value of 'segments_loudness_max'.
      * @return This builder.
      */
    public song.avro.analysis.Builder setSegmentsLoudnessMax(java.util.List<java.lang.Double> value) {
      validate(fields()[7], value);
      this.segments_loudness_max = value;
      fieldSetFlags()[7] = true;
      return this;
    }

    /**
      * Checks whether the 'segments_loudness_max' field has been set.
      * @return True if the 'segments_loudness_max' field has been set, false otherwise.
      */
    public boolean hasSegmentsLoudnessMax() {
      return fieldSetFlags()[7];
    }


    /**
      * Clears the value of the 'segments_loudness_max' field.
      * @return This builder.
      */
    public song.avro.analysis.Builder clearSegmentsLoudnessMax() {
      segments_loudness_max = null;
      fieldSetFlags()[7] = false;
      return this;
    }

    /**
      * Gets the value of the 'segments_loudness_max_time' field.
      * @return The value.
      */
    public java.util.List<java.lang.Double> getSegmentsLoudnessMaxTime() {
      return segments_loudness_max_time;
    }


    /**
      * Sets the value of the 'segments_loudness_max_time' field.
      * @param value The value of 'segments_loudness_max_time'.
      * @return This builder.
      */
    public song.avro.analysis.Builder setSegmentsLoudnessMaxTime(java.util.List<java.lang.Double> value) {
      validate(fields()[8], value);
      this.segments_loudness_max_time = value;
      fieldSetFlags()[8] = true;
      return this;
    }

    /**
      * Checks whether the 'segments_loudness_max_time' field has been set.
      * @return True if the 'segments_loudness_max_time' field has been set, false otherwise.
      */
    public boolean hasSegmentsLoudnessMaxTime() {
      return fieldSetFlags()[8];
    }


    /**
      * Clears the value of the 'segments_loudness_max_time' field.
      * @return This builder.
      */
    public song.avro.analysis.Builder clearSegmentsLoudnessMaxTime() {
      segments_loudness_max_time = null;
      fieldSetFlags()[8] = false;
      return this;
    }

    /**
      * Gets the value of the 'segments_loudness_start' field.
      * @return The value.
      */
    public java.util.List<java.lang.Double> getSegmentsLoudnessStart() {
      return segments_loudness_start;
    }


    /**
      * Sets the value of the 'segments_loudness_start' field.
      * @param value The value of 'segments_loudness_start'.
      * @return This builder.
      */
    public song.avro.analysis.Builder setSegmentsLoudnessStart(java.util.List<java.lang.Double> value) {
      validate(fields()[9], value);
      this.segments_loudness_start = value;
      fieldSetFlags()[9] = true;
      return this;
    }

    /**
      * Checks whether the 'segments_loudness_start' field has been set.
      * @return True if the 'segments_loudness_start' field has been set, false otherwise.
      */
    public boolean hasSegmentsLoudnessStart() {
      return fieldSetFlags()[9];
    }


    /**
      * Clears the value of the 'segments_loudness_start' field.
      * @return This builder.
      */
    public song.avro.analysis.Builder clearSegmentsLoudnessStart() {
      segments_loudness_start = null;
      fieldSetFlags()[9] = false;
      return this;
    }

    /**
      * Gets the value of the 'segments_pitches' field.
      * @return The value.
      */
    public java.util.List<java.util.List<java.lang.Double>> getSegmentsPitches() {
      return segments_pitches;
    }


    /**
      * Sets the value of the 'segments_pitches' field.
      * @param value The value of 'segments_pitches'.
      * @return This builder.
      */
    public song.avro.analysis.Builder setSegmentsPitches(java.util.List<java.util.List<java.lang.Double>> value) {
      validate(fields()[10], value);
      this.segments_pitches = value;
      fieldSetFlags()[10] = true;
      return this;
    }

    /**
      * Checks whether the 'segments_pitches' field has been set.
      * @return True if the 'segments_pitches' field has been set, false otherwise.
      */
    public boolean hasSegmentsPitches() {
      return fieldSetFlags()[10];
    }


    /**
      * Clears the value of the 'segments_pitches' field.
      * @return This builder.
      */
    public song.avro.analysis.Builder clearSegmentsPitches() {
      segments_pitches = null;
      fieldSetFlags()[10] = false;
      return this;
    }

    /**
      * Gets the value of the 'segments_start' field.
      * @return The value.
      */
    public java.util.List<java.lang.Double> getSegmentsStart() {
      return segments_start;
    }


    /**
      * Sets the value of the 'segments_start' field.
      * @param value The value of 'segments_start'.
      * @return This builder.
      */
    public song.avro.analysis.Builder setSegmentsStart(java.util.List<java.lang.Double> value) {
      validate(fields()[11], value);
      this.segments_start = value;
      fieldSetFlags()[11] = true;
      return this;
    }

    /**
      * Checks whether the 'segments_start' field has been set.
      * @return True if the 'segments_start' field has been set, false otherwise.
      */
    public boolean hasSegmentsStart() {
      return fieldSetFlags()[11];
    }


    /**
      * Clears the value of the 'segments_start' field.
      * @return This builder.
      */
    public song.avro.analysis.Builder clearSegmentsStart() {
      segments_start = null;
      fieldSetFlags()[11] = false;
      return this;
    }

    /**
      * Gets the value of the 'segments_timbre' field.
      * @return The value.
      */
    public java.util.List<java.util.List<java.lang.Double>> getSegmentsTimbre() {
      return segments_timbre;
    }


    /**
      * Sets the value of the 'segments_timbre' field.
      * @param value The value of 'segments_timbre'.
      * @return This builder.
      */
    public song.avro.analysis.Builder setSegmentsTimbre(java.util.List<java.util.List<java.lang.Double>> value) {
      validate(fields()[12], value);
      this.segments_timbre = value;
      fieldSetFlags()[12] = true;
      return this;
    }

    /**
      * Checks whether the 'segments_timbre' field has been set.
      * @return True if the 'segments_timbre' field has been set, false otherwise.
      */
    public boolean hasSegmentsTimbre() {
      return fieldSetFlags()[12];
    }


    /**
      * Clears the value of the 'segments_timbre' field.
      * @return This builder.
      */
    public song.avro.analysis.Builder clearSegmentsTimbre() {
      segments_timbre = null;
      fieldSetFlags()[12] = false;
      return this;
    }

    /**
      * Gets the value of the 'songs' field.
      * @return The value.
      */
    public song.avro.songs getSongs() {
      return songs;
    }


    /**
      * Sets the value of the 'songs' field.
      * @param value The value of 'songs'.
      * @return This builder.
      */
    public song.avro.analysis.Builder setSongs(song.avro.songs value) {
      validate(fields()[13], value);
      this.songsBuilder = null;
      this.songs = value;
      fieldSetFlags()[13] = true;
      return this;
    }

    /**
      * Checks whether the 'songs' field has been set.
      * @return True if the 'songs' field has been set, false otherwise.
      */
    public boolean hasSongs() {
      return fieldSetFlags()[13];
    }

    /**
     * Gets the Builder instance for the 'songs' field and creates one if it doesn't exist yet.
     * @return This builder.
     */
    public song.avro.songs.Builder getSongsBuilder() {
      if (songsBuilder == null) {
        if (hasSongs()) {
          setSongsBuilder(song.avro.songs.newBuilder(songs));
        } else {
          setSongsBuilder(song.avro.songs.newBuilder());
        }
      }
      return songsBuilder;
    }

    /**
     * Sets the Builder instance for the 'songs' field
     * @param value The builder instance that must be set.
     * @return This builder.
     */

    public song.avro.analysis.Builder setSongsBuilder(song.avro.songs.Builder value) {
      clearSongs();
      songsBuilder = value;
      return this;
    }

    /**
     * Checks whether the 'songs' field has an active Builder instance
     * @return True if the 'songs' field has an active Builder instance
     */
    public boolean hasSongsBuilder() {
      return songsBuilder != null;
    }

    /**
      * Clears the value of the 'songs' field.
      * @return This builder.
      */
    public song.avro.analysis.Builder clearSongs() {
      songs = null;
      songsBuilder = null;
      fieldSetFlags()[13] = false;
      return this;
    }

    /**
      * Gets the value of the 'tatums_confidence' field.
      * @return The value.
      */
    public java.util.List<java.lang.Double> getTatumsConfidence() {
      return tatums_confidence;
    }


    /**
      * Sets the value of the 'tatums_confidence' field.
      * @param value The value of 'tatums_confidence'.
      * @return This builder.
      */
    public song.avro.analysis.Builder setTatumsConfidence(java.util.List<java.lang.Double> value) {
      validate(fields()[14], value);
      this.tatums_confidence = value;
      fieldSetFlags()[14] = true;
      return this;
    }

    /**
      * Checks whether the 'tatums_confidence' field has been set.
      * @return True if the 'tatums_confidence' field has been set, false otherwise.
      */
    public boolean hasTatumsConfidence() {
      return fieldSetFlags()[14];
    }


    /**
      * Clears the value of the 'tatums_confidence' field.
      * @return This builder.
      */
    public song.avro.analysis.Builder clearTatumsConfidence() {
      tatums_confidence = null;
      fieldSetFlags()[14] = false;
      return this;
    }

    /**
      * Gets the value of the 'tatums_start' field.
      * @return The value.
      */
    public java.util.List<java.lang.Double> getTatumsStart() {
      return tatums_start;
    }


    /**
      * Sets the value of the 'tatums_start' field.
      * @param value The value of 'tatums_start'.
      * @return This builder.
      */
    public song.avro.analysis.Builder setTatumsStart(java.util.List<java.lang.Double> value) {
      validate(fields()[15], value);
      this.tatums_start = value;
      fieldSetFlags()[15] = true;
      return this;
    }

    /**
      * Checks whether the 'tatums_start' field has been set.
      * @return True if the 'tatums_start' field has been set, false otherwise.
      */
    public boolean hasTatumsStart() {
      return fieldSetFlags()[15];
    }


    /**
      * Clears the value of the 'tatums_start' field.
      * @return This builder.
      */
    public song.avro.analysis.Builder clearTatumsStart() {
      tatums_start = null;
      fieldSetFlags()[15] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public analysis build() {
      try {
        analysis record = new analysis();
        record.bars_confidence = fieldSetFlags()[0] ? this.bars_confidence : (java.util.List<java.lang.Double>) defaultValue(fields()[0]);
        record.bars_start = fieldSetFlags()[1] ? this.bars_start : (java.util.List<java.lang.Double>) defaultValue(fields()[1]);
        record.beats_confidence = fieldSetFlags()[2] ? this.beats_confidence : (java.util.List<java.lang.Double>) defaultValue(fields()[2]);
        record.beats_start = fieldSetFlags()[3] ? this.beats_start : (java.util.List<java.lang.Double>) defaultValue(fields()[3]);
        record.sections_confidence = fieldSetFlags()[4] ? this.sections_confidence : (java.util.List<java.lang.Double>) defaultValue(fields()[4]);
        record.sections_start = fieldSetFlags()[5] ? this.sections_start : (java.util.List<java.lang.Double>) defaultValue(fields()[5]);
        record.segments_confidence = fieldSetFlags()[6] ? this.segments_confidence : (java.util.List<java.lang.Double>) defaultValue(fields()[6]);
        record.segments_loudness_max = fieldSetFlags()[7] ? this.segments_loudness_max : (java.util.List<java.lang.Double>) defaultValue(fields()[7]);
        record.segments_loudness_max_time = fieldSetFlags()[8] ? this.segments_loudness_max_time : (java.util.List<java.lang.Double>) defaultValue(fields()[8]);
        record.segments_loudness_start = fieldSetFlags()[9] ? this.segments_loudness_start : (java.util.List<java.lang.Double>) defaultValue(fields()[9]);
        record.segments_pitches = fieldSetFlags()[10] ? this.segments_pitches : (java.util.List<java.util.List<java.lang.Double>>) defaultValue(fields()[10]);
        record.segments_start = fieldSetFlags()[11] ? this.segments_start : (java.util.List<java.lang.Double>) defaultValue(fields()[11]);
        record.segments_timbre = fieldSetFlags()[12] ? this.segments_timbre : (java.util.List<java.util.List<java.lang.Double>>) defaultValue(fields()[12]);
        if (songsBuilder != null) {
          try {
            record.songs = this.songsBuilder.build();
          } catch (org.apache.avro.AvroMissingFieldException e) {
            e.addParentField(record.getSchema().getField("songs"));
            throw e;
          }
        } else {
          record.songs = fieldSetFlags()[13] ? this.songs : (song.avro.songs) defaultValue(fields()[13]);
        }
        record.tatums_confidence = fieldSetFlags()[14] ? this.tatums_confidence : (java.util.List<java.lang.Double>) defaultValue(fields()[14]);
        record.tatums_start = fieldSetFlags()[15] ? this.tatums_start : (java.util.List<java.lang.Double>) defaultValue(fields()[15]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<analysis>
    WRITER$ = (org.apache.avro.io.DatumWriter<analysis>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<analysis>
    READER$ = (org.apache.avro.io.DatumReader<analysis>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override protected boolean hasCustomCoders() { return true; }

  @Override public void customEncode(org.apache.avro.io.Encoder out)
    throws java.io.IOException
  {
    if (this.bars_confidence == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      long size0 = this.bars_confidence.size();
      out.writeArrayStart();
      out.setItemCount(size0);
      long actualSize0 = 0;
      for (java.lang.Double e0: this.bars_confidence) {
        actualSize0++;
        out.startItem();
        out.writeDouble(e0);
      }
      out.writeArrayEnd();
      if (actualSize0 != size0)
        throw new java.util.ConcurrentModificationException("Array-size written was " + size0 + ", but element count was " + actualSize0 + ".");
    }

    if (this.bars_start == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      long size1 = this.bars_start.size();
      out.writeArrayStart();
      out.setItemCount(size1);
      long actualSize1 = 0;
      for (java.lang.Double e1: this.bars_start) {
        actualSize1++;
        out.startItem();
        out.writeDouble(e1);
      }
      out.writeArrayEnd();
      if (actualSize1 != size1)
        throw new java.util.ConcurrentModificationException("Array-size written was " + size1 + ", but element count was " + actualSize1 + ".");
    }

    if (this.beats_confidence == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      long size2 = this.beats_confidence.size();
      out.writeArrayStart();
      out.setItemCount(size2);
      long actualSize2 = 0;
      for (java.lang.Double e2: this.beats_confidence) {
        actualSize2++;
        out.startItem();
        out.writeDouble(e2);
      }
      out.writeArrayEnd();
      if (actualSize2 != size2)
        throw new java.util.ConcurrentModificationException("Array-size written was " + size2 + ", but element count was " + actualSize2 + ".");
    }

    if (this.beats_start == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      long size3 = this.beats_start.size();
      out.writeArrayStart();
      out.setItemCount(size3);
      long actualSize3 = 0;
      for (java.lang.Double e3: this.beats_start) {
        actualSize3++;
        out.startItem();
        out.writeDouble(e3);
      }
      out.writeArrayEnd();
      if (actualSize3 != size3)
        throw new java.util.ConcurrentModificationException("Array-size written was " + size3 + ", but element count was " + actualSize3 + ".");
    }

    if (this.sections_confidence == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      long size4 = this.sections_confidence.size();
      out.writeArrayStart();
      out.setItemCount(size4);
      long actualSize4 = 0;
      for (java.lang.Double e4: this.sections_confidence) {
        actualSize4++;
        out.startItem();
        out.writeDouble(e4);
      }
      out.writeArrayEnd();
      if (actualSize4 != size4)
        throw new java.util.ConcurrentModificationException("Array-size written was " + size4 + ", but element count was " + actualSize4 + ".");
    }

    if (this.sections_start == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      long size5 = this.sections_start.size();
      out.writeArrayStart();
      out.setItemCount(size5);
      long actualSize5 = 0;
      for (java.lang.Double e5: this.sections_start) {
        actualSize5++;
        out.startItem();
        out.writeDouble(e5);
      }
      out.writeArrayEnd();
      if (actualSize5 != size5)
        throw new java.util.ConcurrentModificationException("Array-size written was " + size5 + ", but element count was " + actualSize5 + ".");
    }

    if (this.segments_confidence == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      long size6 = this.segments_confidence.size();
      out.writeArrayStart();
      out.setItemCount(size6);
      long actualSize6 = 0;
      for (java.lang.Double e6: this.segments_confidence) {
        actualSize6++;
        out.startItem();
        out.writeDouble(e6);
      }
      out.writeArrayEnd();
      if (actualSize6 != size6)
        throw new java.util.ConcurrentModificationException("Array-size written was " + size6 + ", but element count was " + actualSize6 + ".");
    }

    if (this.segments_loudness_max == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      long size7 = this.segments_loudness_max.size();
      out.writeArrayStart();
      out.setItemCount(size7);
      long actualSize7 = 0;
      for (java.lang.Double e7: this.segments_loudness_max) {
        actualSize7++;
        out.startItem();
        out.writeDouble(e7);
      }
      out.writeArrayEnd();
      if (actualSize7 != size7)
        throw new java.util.ConcurrentModificationException("Array-size written was " + size7 + ", but element count was " + actualSize7 + ".");
    }

    if (this.segments_loudness_max_time == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      long size8 = this.segments_loudness_max_time.size();
      out.writeArrayStart();
      out.setItemCount(size8);
      long actualSize8 = 0;
      for (java.lang.Double e8: this.segments_loudness_max_time) {
        actualSize8++;
        out.startItem();
        out.writeDouble(e8);
      }
      out.writeArrayEnd();
      if (actualSize8 != size8)
        throw new java.util.ConcurrentModificationException("Array-size written was " + size8 + ", but element count was " + actualSize8 + ".");
    }

    if (this.segments_loudness_start == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      long size9 = this.segments_loudness_start.size();
      out.writeArrayStart();
      out.setItemCount(size9);
      long actualSize9 = 0;
      for (java.lang.Double e9: this.segments_loudness_start) {
        actualSize9++;
        out.startItem();
        out.writeDouble(e9);
      }
      out.writeArrayEnd();
      if (actualSize9 != size9)
        throw new java.util.ConcurrentModificationException("Array-size written was " + size9 + ", but element count was " + actualSize9 + ".");
    }

    long size10 = this.segments_pitches.size();
    out.writeArrayStart();
    out.setItemCount(size10);
    long actualSize10 = 0;
    for (java.util.List<java.lang.Double> e10: this.segments_pitches) {
      actualSize10++;
      out.startItem();
      long size11 = e10.size();
      out.writeArrayStart();
      out.setItemCount(size11);
      long actualSize11 = 0;
      for (java.lang.Double e11: e10) {
        actualSize11++;
        out.startItem();
        out.writeDouble(e11);
      }
      out.writeArrayEnd();
      if (actualSize11 != size11)
        throw new java.util.ConcurrentModificationException("Array-size written was " + size11 + ", but element count was " + actualSize11 + ".");
    }
    out.writeArrayEnd();
    if (actualSize10 != size10)
      throw new java.util.ConcurrentModificationException("Array-size written was " + size10 + ", but element count was " + actualSize10 + ".");

    if (this.segments_start == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      long size12 = this.segments_start.size();
      out.writeArrayStart();
      out.setItemCount(size12);
      long actualSize12 = 0;
      for (java.lang.Double e12: this.segments_start) {
        actualSize12++;
        out.startItem();
        out.writeDouble(e12);
      }
      out.writeArrayEnd();
      if (actualSize12 != size12)
        throw new java.util.ConcurrentModificationException("Array-size written was " + size12 + ", but element count was " + actualSize12 + ".");
    }

    long size13 = this.segments_timbre.size();
    out.writeArrayStart();
    out.setItemCount(size13);
    long actualSize13 = 0;
    for (java.util.List<java.lang.Double> e13: this.segments_timbre) {
      actualSize13++;
      out.startItem();
      long size14 = e13.size();
      out.writeArrayStart();
      out.setItemCount(size14);
      long actualSize14 = 0;
      for (java.lang.Double e14: e13) {
        actualSize14++;
        out.startItem();
        out.writeDouble(e14);
      }
      out.writeArrayEnd();
      if (actualSize14 != size14)
        throw new java.util.ConcurrentModificationException("Array-size written was " + size14 + ", but element count was " + actualSize14 + ".");
    }
    out.writeArrayEnd();
    if (actualSize13 != size13)
      throw new java.util.ConcurrentModificationException("Array-size written was " + size13 + ", but element count was " + actualSize13 + ".");

    this.songs.customEncode(out);

    if (this.tatums_confidence == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      long size15 = this.tatums_confidence.size();
      out.writeArrayStart();
      out.setItemCount(size15);
      long actualSize15 = 0;
      for (java.lang.Double e15: this.tatums_confidence) {
        actualSize15++;
        out.startItem();
        out.writeDouble(e15);
      }
      out.writeArrayEnd();
      if (actualSize15 != size15)
        throw new java.util.ConcurrentModificationException("Array-size written was " + size15 + ", but element count was " + actualSize15 + ".");
    }

    if (this.tatums_start == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      long size16 = this.tatums_start.size();
      out.writeArrayStart();
      out.setItemCount(size16);
      long actualSize16 = 0;
      for (java.lang.Double e16: this.tatums_start) {
        actualSize16++;
        out.startItem();
        out.writeDouble(e16);
      }
      out.writeArrayEnd();
      if (actualSize16 != size16)
        throw new java.util.ConcurrentModificationException("Array-size written was " + size16 + ", but element count was " + actualSize16 + ".");
    }

  }

  @Override public void customDecode(org.apache.avro.io.ResolvingDecoder in)
    throws java.io.IOException
  {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      if (in.readIndex() != 1) {
        in.readNull();
        this.bars_confidence = null;
      } else {
        long size0 = in.readArrayStart();
        java.util.List<java.lang.Double> a0 = this.bars_confidence;
        if (a0 == null) {
          a0 = new SpecificData.Array<java.lang.Double>((int)size0, SCHEMA$.getField("bars_confidence").schema().getTypes().get(1));
          this.bars_confidence = a0;
        } else a0.clear();
        SpecificData.Array<java.lang.Double> ga0 = (a0 instanceof SpecificData.Array ? (SpecificData.Array<java.lang.Double>)a0 : null);
        for ( ; 0 < size0; size0 = in.arrayNext()) {
          for ( ; size0 != 0; size0--) {
            java.lang.Double e0 = (ga0 != null ? ga0.peek() : null);
            e0 = in.readDouble();
            a0.add(e0);
          }
        }
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.bars_start = null;
      } else {
        long size1 = in.readArrayStart();
        java.util.List<java.lang.Double> a1 = this.bars_start;
        if (a1 == null) {
          a1 = new SpecificData.Array<java.lang.Double>((int)size1, SCHEMA$.getField("bars_start").schema().getTypes().get(1));
          this.bars_start = a1;
        } else a1.clear();
        SpecificData.Array<java.lang.Double> ga1 = (a1 instanceof SpecificData.Array ? (SpecificData.Array<java.lang.Double>)a1 : null);
        for ( ; 0 < size1; size1 = in.arrayNext()) {
          for ( ; size1 != 0; size1--) {
            java.lang.Double e1 = (ga1 != null ? ga1.peek() : null);
            e1 = in.readDouble();
            a1.add(e1);
          }
        }
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.beats_confidence = null;
      } else {
        long size2 = in.readArrayStart();
        java.util.List<java.lang.Double> a2 = this.beats_confidence;
        if (a2 == null) {
          a2 = new SpecificData.Array<java.lang.Double>((int)size2, SCHEMA$.getField("beats_confidence").schema().getTypes().get(1));
          this.beats_confidence = a2;
        } else a2.clear();
        SpecificData.Array<java.lang.Double> ga2 = (a2 instanceof SpecificData.Array ? (SpecificData.Array<java.lang.Double>)a2 : null);
        for ( ; 0 < size2; size2 = in.arrayNext()) {
          for ( ; size2 != 0; size2--) {
            java.lang.Double e2 = (ga2 != null ? ga2.peek() : null);
            e2 = in.readDouble();
            a2.add(e2);
          }
        }
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.beats_start = null;
      } else {
        long size3 = in.readArrayStart();
        java.util.List<java.lang.Double> a3 = this.beats_start;
        if (a3 == null) {
          a3 = new SpecificData.Array<java.lang.Double>((int)size3, SCHEMA$.getField("beats_start").schema().getTypes().get(1));
          this.beats_start = a3;
        } else a3.clear();
        SpecificData.Array<java.lang.Double> ga3 = (a3 instanceof SpecificData.Array ? (SpecificData.Array<java.lang.Double>)a3 : null);
        for ( ; 0 < size3; size3 = in.arrayNext()) {
          for ( ; size3 != 0; size3--) {
            java.lang.Double e3 = (ga3 != null ? ga3.peek() : null);
            e3 = in.readDouble();
            a3.add(e3);
          }
        }
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.sections_confidence = null;
      } else {
        long size4 = in.readArrayStart();
        java.util.List<java.lang.Double> a4 = this.sections_confidence;
        if (a4 == null) {
          a4 = new SpecificData.Array<java.lang.Double>((int)size4, SCHEMA$.getField("sections_confidence").schema().getTypes().get(1));
          this.sections_confidence = a4;
        } else a4.clear();
        SpecificData.Array<java.lang.Double> ga4 = (a4 instanceof SpecificData.Array ? (SpecificData.Array<java.lang.Double>)a4 : null);
        for ( ; 0 < size4; size4 = in.arrayNext()) {
          for ( ; size4 != 0; size4--) {
            java.lang.Double e4 = (ga4 != null ? ga4.peek() : null);
            e4 = in.readDouble();
            a4.add(e4);
          }
        }
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.sections_start = null;
      } else {
        long size5 = in.readArrayStart();
        java.util.List<java.lang.Double> a5 = this.sections_start;
        if (a5 == null) {
          a5 = new SpecificData.Array<java.lang.Double>((int)size5, SCHEMA$.getField("sections_start").schema().getTypes().get(1));
          this.sections_start = a5;
        } else a5.clear();
        SpecificData.Array<java.lang.Double> ga5 = (a5 instanceof SpecificData.Array ? (SpecificData.Array<java.lang.Double>)a5 : null);
        for ( ; 0 < size5; size5 = in.arrayNext()) {
          for ( ; size5 != 0; size5--) {
            java.lang.Double e5 = (ga5 != null ? ga5.peek() : null);
            e5 = in.readDouble();
            a5.add(e5);
          }
        }
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.segments_confidence = null;
      } else {
        long size6 = in.readArrayStart();
        java.util.List<java.lang.Double> a6 = this.segments_confidence;
        if (a6 == null) {
          a6 = new SpecificData.Array<java.lang.Double>((int)size6, SCHEMA$.getField("segments_confidence").schema().getTypes().get(1));
          this.segments_confidence = a6;
        } else a6.clear();
        SpecificData.Array<java.lang.Double> ga6 = (a6 instanceof SpecificData.Array ? (SpecificData.Array<java.lang.Double>)a6 : null);
        for ( ; 0 < size6; size6 = in.arrayNext()) {
          for ( ; size6 != 0; size6--) {
            java.lang.Double e6 = (ga6 != null ? ga6.peek() : null);
            e6 = in.readDouble();
            a6.add(e6);
          }
        }
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.segments_loudness_max = null;
      } else {
        long size7 = in.readArrayStart();
        java.util.List<java.lang.Double> a7 = this.segments_loudness_max;
        if (a7 == null) {
          a7 = new SpecificData.Array<java.lang.Double>((int)size7, SCHEMA$.getField("segments_loudness_max").schema().getTypes().get(1));
          this.segments_loudness_max = a7;
        } else a7.clear();
        SpecificData.Array<java.lang.Double> ga7 = (a7 instanceof SpecificData.Array ? (SpecificData.Array<java.lang.Double>)a7 : null);
        for ( ; 0 < size7; size7 = in.arrayNext()) {
          for ( ; size7 != 0; size7--) {
            java.lang.Double e7 = (ga7 != null ? ga7.peek() : null);
            e7 = in.readDouble();
            a7.add(e7);
          }
        }
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.segments_loudness_max_time = null;
      } else {
        long size8 = in.readArrayStart();
        java.util.List<java.lang.Double> a8 = this.segments_loudness_max_time;
        if (a8 == null) {
          a8 = new SpecificData.Array<java.lang.Double>((int)size8, SCHEMA$.getField("segments_loudness_max_time").schema().getTypes().get(1));
          this.segments_loudness_max_time = a8;
        } else a8.clear();
        SpecificData.Array<java.lang.Double> ga8 = (a8 instanceof SpecificData.Array ? (SpecificData.Array<java.lang.Double>)a8 : null);
        for ( ; 0 < size8; size8 = in.arrayNext()) {
          for ( ; size8 != 0; size8--) {
            java.lang.Double e8 = (ga8 != null ? ga8.peek() : null);
            e8 = in.readDouble();
            a8.add(e8);
          }
        }
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.segments_loudness_start = null;
      } else {
        long size9 = in.readArrayStart();
        java.util.List<java.lang.Double> a9 = this.segments_loudness_start;
        if (a9 == null) {
          a9 = new SpecificData.Array<java.lang.Double>((int)size9, SCHEMA$.getField("segments_loudness_start").schema().getTypes().get(1));
          this.segments_loudness_start = a9;
        } else a9.clear();
        SpecificData.Array<java.lang.Double> ga9 = (a9 instanceof SpecificData.Array ? (SpecificData.Array<java.lang.Double>)a9 : null);
        for ( ; 0 < size9; size9 = in.arrayNext()) {
          for ( ; size9 != 0; size9--) {
            java.lang.Double e9 = (ga9 != null ? ga9.peek() : null);
            e9 = in.readDouble();
            a9.add(e9);
          }
        }
      }

      long size10 = in.readArrayStart();
      java.util.List<java.util.List<java.lang.Double>> a10 = this.segments_pitches;
      if (a10 == null) {
        a10 = new SpecificData.Array<java.util.List<java.lang.Double>>((int)size10, SCHEMA$.getField("segments_pitches").schema());
        this.segments_pitches = a10;
      } else a10.clear();
      SpecificData.Array<java.util.List<java.lang.Double>> ga10 = (a10 instanceof SpecificData.Array ? (SpecificData.Array<java.util.List<java.lang.Double>>)a10 : null);
      for ( ; 0 < size10; size10 = in.arrayNext()) {
        for ( ; size10 != 0; size10--) {
          java.util.List<java.lang.Double> e10 = (ga10 != null ? ga10.peek() : null);
          long size11 = in.readArrayStart();
          java.util.List<java.lang.Double> a11 = e10;
          if (a11 == null) {
            a11 = new SpecificData.Array<java.lang.Double>((int)size11, SCHEMA$.getField("segments_pitches").schema().getElementType());
            e10 = a11;
          } else a11.clear();
          SpecificData.Array<java.lang.Double> ga11 = (a11 instanceof SpecificData.Array ? (SpecificData.Array<java.lang.Double>)a11 : null);
          for ( ; 0 < size11; size11 = in.arrayNext()) {
            for ( ; size11 != 0; size11--) {
              java.lang.Double e11 = (ga11 != null ? ga11.peek() : null);
              e11 = in.readDouble();
              a11.add(e11);
            }
          }
          a10.add(e10);
        }
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.segments_start = null;
      } else {
        long size12 = in.readArrayStart();
        java.util.List<java.lang.Double> a12 = this.segments_start;
        if (a12 == null) {
          a12 = new SpecificData.Array<java.lang.Double>((int)size12, SCHEMA$.getField("segments_start").schema().getTypes().get(1));
          this.segments_start = a12;
        } else a12.clear();
        SpecificData.Array<java.lang.Double> ga12 = (a12 instanceof SpecificData.Array ? (SpecificData.Array<java.lang.Double>)a12 : null);
        for ( ; 0 < size12; size12 = in.arrayNext()) {
          for ( ; size12 != 0; size12--) {
            java.lang.Double e12 = (ga12 != null ? ga12.peek() : null);
            e12 = in.readDouble();
            a12.add(e12);
          }
        }
      }

      long size13 = in.readArrayStart();
      java.util.List<java.util.List<java.lang.Double>> a13 = this.segments_timbre;
      if (a13 == null) {
        a13 = new SpecificData.Array<java.util.List<java.lang.Double>>((int)size13, SCHEMA$.getField("segments_timbre").schema());
        this.segments_timbre = a13;
      } else a13.clear();
      SpecificData.Array<java.util.List<java.lang.Double>> ga13 = (a13 instanceof SpecificData.Array ? (SpecificData.Array<java.util.List<java.lang.Double>>)a13 : null);
      for ( ; 0 < size13; size13 = in.arrayNext()) {
        for ( ; size13 != 0; size13--) {
          java.util.List<java.lang.Double> e13 = (ga13 != null ? ga13.peek() : null);
          long size14 = in.readArrayStart();
          java.util.List<java.lang.Double> a14 = e13;
          if (a14 == null) {
            a14 = new SpecificData.Array<java.lang.Double>((int)size14, SCHEMA$.getField("segments_timbre").schema().getElementType());
            e13 = a14;
          } else a14.clear();
          SpecificData.Array<java.lang.Double> ga14 = (a14 instanceof SpecificData.Array ? (SpecificData.Array<java.lang.Double>)a14 : null);
          for ( ; 0 < size14; size14 = in.arrayNext()) {
            for ( ; size14 != 0; size14--) {
              java.lang.Double e14 = (ga14 != null ? ga14.peek() : null);
              e14 = in.readDouble();
              a14.add(e14);
            }
          }
          a13.add(e13);
        }
      }

      if (this.songs == null) {
        this.songs = new song.avro.songs();
      }
      this.songs.customDecode(in);

      if (in.readIndex() != 1) {
        in.readNull();
        this.tatums_confidence = null;
      } else {
        long size15 = in.readArrayStart();
        java.util.List<java.lang.Double> a15 = this.tatums_confidence;
        if (a15 == null) {
          a15 = new SpecificData.Array<java.lang.Double>((int)size15, SCHEMA$.getField("tatums_confidence").schema().getTypes().get(1));
          this.tatums_confidence = a15;
        } else a15.clear();
        SpecificData.Array<java.lang.Double> ga15 = (a15 instanceof SpecificData.Array ? (SpecificData.Array<java.lang.Double>)a15 : null);
        for ( ; 0 < size15; size15 = in.arrayNext()) {
          for ( ; size15 != 0; size15--) {
            java.lang.Double e15 = (ga15 != null ? ga15.peek() : null);
            e15 = in.readDouble();
            a15.add(e15);
          }
        }
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.tatums_start = null;
      } else {
        long size16 = in.readArrayStart();
        java.util.List<java.lang.Double> a16 = this.tatums_start;
        if (a16 == null) {
          a16 = new SpecificData.Array<java.lang.Double>((int)size16, SCHEMA$.getField("tatums_start").schema().getTypes().get(1));
          this.tatums_start = a16;
        } else a16.clear();
        SpecificData.Array<java.lang.Double> ga16 = (a16 instanceof SpecificData.Array ? (SpecificData.Array<java.lang.Double>)a16 : null);
        for ( ; 0 < size16; size16 = in.arrayNext()) {
          for ( ; size16 != 0; size16--) {
            java.lang.Double e16 = (ga16 != null ? ga16.peek() : null);
            e16 = in.readDouble();
            a16.add(e16);
          }
        }
      }

    } else {
      for (int i = 0; i < 16; i++) {
        switch (fieldOrder[i].pos()) {
        case 0:
          if (in.readIndex() != 1) {
            in.readNull();
            this.bars_confidence = null;
          } else {
            long size0 = in.readArrayStart();
            java.util.List<java.lang.Double> a0 = this.bars_confidence;
            if (a0 == null) {
              a0 = new SpecificData.Array<java.lang.Double>((int)size0, SCHEMA$.getField("bars_confidence").schema().getTypes().get(1));
              this.bars_confidence = a0;
            } else a0.clear();
            SpecificData.Array<java.lang.Double> ga0 = (a0 instanceof SpecificData.Array ? (SpecificData.Array<java.lang.Double>)a0 : null);
            for ( ; 0 < size0; size0 = in.arrayNext()) {
              for ( ; size0 != 0; size0--) {
                java.lang.Double e0 = (ga0 != null ? ga0.peek() : null);
                e0 = in.readDouble();
                a0.add(e0);
              }
            }
          }
          break;

        case 1:
          if (in.readIndex() != 1) {
            in.readNull();
            this.bars_start = null;
          } else {
            long size1 = in.readArrayStart();
            java.util.List<java.lang.Double> a1 = this.bars_start;
            if (a1 == null) {
              a1 = new SpecificData.Array<java.lang.Double>((int)size1, SCHEMA$.getField("bars_start").schema().getTypes().get(1));
              this.bars_start = a1;
            } else a1.clear();
            SpecificData.Array<java.lang.Double> ga1 = (a1 instanceof SpecificData.Array ? (SpecificData.Array<java.lang.Double>)a1 : null);
            for ( ; 0 < size1; size1 = in.arrayNext()) {
              for ( ; size1 != 0; size1--) {
                java.lang.Double e1 = (ga1 != null ? ga1.peek() : null);
                e1 = in.readDouble();
                a1.add(e1);
              }
            }
          }
          break;

        case 2:
          if (in.readIndex() != 1) {
            in.readNull();
            this.beats_confidence = null;
          } else {
            long size2 = in.readArrayStart();
            java.util.List<java.lang.Double> a2 = this.beats_confidence;
            if (a2 == null) {
              a2 = new SpecificData.Array<java.lang.Double>((int)size2, SCHEMA$.getField("beats_confidence").schema().getTypes().get(1));
              this.beats_confidence = a2;
            } else a2.clear();
            SpecificData.Array<java.lang.Double> ga2 = (a2 instanceof SpecificData.Array ? (SpecificData.Array<java.lang.Double>)a2 : null);
            for ( ; 0 < size2; size2 = in.arrayNext()) {
              for ( ; size2 != 0; size2--) {
                java.lang.Double e2 = (ga2 != null ? ga2.peek() : null);
                e2 = in.readDouble();
                a2.add(e2);
              }
            }
          }
          break;

        case 3:
          if (in.readIndex() != 1) {
            in.readNull();
            this.beats_start = null;
          } else {
            long size3 = in.readArrayStart();
            java.util.List<java.lang.Double> a3 = this.beats_start;
            if (a3 == null) {
              a3 = new SpecificData.Array<java.lang.Double>((int)size3, SCHEMA$.getField("beats_start").schema().getTypes().get(1));
              this.beats_start = a3;
            } else a3.clear();
            SpecificData.Array<java.lang.Double> ga3 = (a3 instanceof SpecificData.Array ? (SpecificData.Array<java.lang.Double>)a3 : null);
            for ( ; 0 < size3; size3 = in.arrayNext()) {
              for ( ; size3 != 0; size3--) {
                java.lang.Double e3 = (ga3 != null ? ga3.peek() : null);
                e3 = in.readDouble();
                a3.add(e3);
              }
            }
          }
          break;

        case 4:
          if (in.readIndex() != 1) {
            in.readNull();
            this.sections_confidence = null;
          } else {
            long size4 = in.readArrayStart();
            java.util.List<java.lang.Double> a4 = this.sections_confidence;
            if (a4 == null) {
              a4 = new SpecificData.Array<java.lang.Double>((int)size4, SCHEMA$.getField("sections_confidence").schema().getTypes().get(1));
              this.sections_confidence = a4;
            } else a4.clear();
            SpecificData.Array<java.lang.Double> ga4 = (a4 instanceof SpecificData.Array ? (SpecificData.Array<java.lang.Double>)a4 : null);
            for ( ; 0 < size4; size4 = in.arrayNext()) {
              for ( ; size4 != 0; size4--) {
                java.lang.Double e4 = (ga4 != null ? ga4.peek() : null);
                e4 = in.readDouble();
                a4.add(e4);
              }
            }
          }
          break;

        case 5:
          if (in.readIndex() != 1) {
            in.readNull();
            this.sections_start = null;
          } else {
            long size5 = in.readArrayStart();
            java.util.List<java.lang.Double> a5 = this.sections_start;
            if (a5 == null) {
              a5 = new SpecificData.Array<java.lang.Double>((int)size5, SCHEMA$.getField("sections_start").schema().getTypes().get(1));
              this.sections_start = a5;
            } else a5.clear();
            SpecificData.Array<java.lang.Double> ga5 = (a5 instanceof SpecificData.Array ? (SpecificData.Array<java.lang.Double>)a5 : null);
            for ( ; 0 < size5; size5 = in.arrayNext()) {
              for ( ; size5 != 0; size5--) {
                java.lang.Double e5 = (ga5 != null ? ga5.peek() : null);
                e5 = in.readDouble();
                a5.add(e5);
              }
            }
          }
          break;

        case 6:
          if (in.readIndex() != 1) {
            in.readNull();
            this.segments_confidence = null;
          } else {
            long size6 = in.readArrayStart();
            java.util.List<java.lang.Double> a6 = this.segments_confidence;
            if (a6 == null) {
              a6 = new SpecificData.Array<java.lang.Double>((int)size6, SCHEMA$.getField("segments_confidence").schema().getTypes().get(1));
              this.segments_confidence = a6;
            } else a6.clear();
            SpecificData.Array<java.lang.Double> ga6 = (a6 instanceof SpecificData.Array ? (SpecificData.Array<java.lang.Double>)a6 : null);
            for ( ; 0 < size6; size6 = in.arrayNext()) {
              for ( ; size6 != 0; size6--) {
                java.lang.Double e6 = (ga6 != null ? ga6.peek() : null);
                e6 = in.readDouble();
                a6.add(e6);
              }
            }
          }
          break;

        case 7:
          if (in.readIndex() != 1) {
            in.readNull();
            this.segments_loudness_max = null;
          } else {
            long size7 = in.readArrayStart();
            java.util.List<java.lang.Double> a7 = this.segments_loudness_max;
            if (a7 == null) {
              a7 = new SpecificData.Array<java.lang.Double>((int)size7, SCHEMA$.getField("segments_loudness_max").schema().getTypes().get(1));
              this.segments_loudness_max = a7;
            } else a7.clear();
            SpecificData.Array<java.lang.Double> ga7 = (a7 instanceof SpecificData.Array ? (SpecificData.Array<java.lang.Double>)a7 : null);
            for ( ; 0 < size7; size7 = in.arrayNext()) {
              for ( ; size7 != 0; size7--) {
                java.lang.Double e7 = (ga7 != null ? ga7.peek() : null);
                e7 = in.readDouble();
                a7.add(e7);
              }
            }
          }
          break;

        case 8:
          if (in.readIndex() != 1) {
            in.readNull();
            this.segments_loudness_max_time = null;
          } else {
            long size8 = in.readArrayStart();
            java.util.List<java.lang.Double> a8 = this.segments_loudness_max_time;
            if (a8 == null) {
              a8 = new SpecificData.Array<java.lang.Double>((int)size8, SCHEMA$.getField("segments_loudness_max_time").schema().getTypes().get(1));
              this.segments_loudness_max_time = a8;
            } else a8.clear();
            SpecificData.Array<java.lang.Double> ga8 = (a8 instanceof SpecificData.Array ? (SpecificData.Array<java.lang.Double>)a8 : null);
            for ( ; 0 < size8; size8 = in.arrayNext()) {
              for ( ; size8 != 0; size8--) {
                java.lang.Double e8 = (ga8 != null ? ga8.peek() : null);
                e8 = in.readDouble();
                a8.add(e8);
              }
            }
          }
          break;

        case 9:
          if (in.readIndex() != 1) {
            in.readNull();
            this.segments_loudness_start = null;
          } else {
            long size9 = in.readArrayStart();
            java.util.List<java.lang.Double> a9 = this.segments_loudness_start;
            if (a9 == null) {
              a9 = new SpecificData.Array<java.lang.Double>((int)size9, SCHEMA$.getField("segments_loudness_start").schema().getTypes().get(1));
              this.segments_loudness_start = a9;
            } else a9.clear();
            SpecificData.Array<java.lang.Double> ga9 = (a9 instanceof SpecificData.Array ? (SpecificData.Array<java.lang.Double>)a9 : null);
            for ( ; 0 < size9; size9 = in.arrayNext()) {
              for ( ; size9 != 0; size9--) {
                java.lang.Double e9 = (ga9 != null ? ga9.peek() : null);
                e9 = in.readDouble();
                a9.add(e9);
              }
            }
          }
          break;

        case 10:
          long size10 = in.readArrayStart();
          java.util.List<java.util.List<java.lang.Double>> a10 = this.segments_pitches;
          if (a10 == null) {
            a10 = new SpecificData.Array<java.util.List<java.lang.Double>>((int)size10, SCHEMA$.getField("segments_pitches").schema());
            this.segments_pitches = a10;
          } else a10.clear();
          SpecificData.Array<java.util.List<java.lang.Double>> ga10 = (a10 instanceof SpecificData.Array ? (SpecificData.Array<java.util.List<java.lang.Double>>)a10 : null);
          for ( ; 0 < size10; size10 = in.arrayNext()) {
            for ( ; size10 != 0; size10--) {
              java.util.List<java.lang.Double> e10 = (ga10 != null ? ga10.peek() : null);
              long size11 = in.readArrayStart();
              java.util.List<java.lang.Double> a11 = e10;
              if (a11 == null) {
                a11 = new SpecificData.Array<java.lang.Double>((int)size11, SCHEMA$.getField("segments_pitches").schema().getElementType());
                e10 = a11;
              } else a11.clear();
              SpecificData.Array<java.lang.Double> ga11 = (a11 instanceof SpecificData.Array ? (SpecificData.Array<java.lang.Double>)a11 : null);
              for ( ; 0 < size11; size11 = in.arrayNext()) {
                for ( ; size11 != 0; size11--) {
                  java.lang.Double e11 = (ga11 != null ? ga11.peek() : null);
                  e11 = in.readDouble();
                  a11.add(e11);
                }
              }
              a10.add(e10);
            }
          }
          break;

        case 11:
          if (in.readIndex() != 1) {
            in.readNull();
            this.segments_start = null;
          } else {
            long size12 = in.readArrayStart();
            java.util.List<java.lang.Double> a12 = this.segments_start;
            if (a12 == null) {
              a12 = new SpecificData.Array<java.lang.Double>((int)size12, SCHEMA$.getField("segments_start").schema().getTypes().get(1));
              this.segments_start = a12;
            } else a12.clear();
            SpecificData.Array<java.lang.Double> ga12 = (a12 instanceof SpecificData.Array ? (SpecificData.Array<java.lang.Double>)a12 : null);
            for ( ; 0 < size12; size12 = in.arrayNext()) {
              for ( ; size12 != 0; size12--) {
                java.lang.Double e12 = (ga12 != null ? ga12.peek() : null);
                e12 = in.readDouble();
                a12.add(e12);
              }
            }
          }
          break;

        case 12:
          long size13 = in.readArrayStart();
          java.util.List<java.util.List<java.lang.Double>> a13 = this.segments_timbre;
          if (a13 == null) {
            a13 = new SpecificData.Array<java.util.List<java.lang.Double>>((int)size13, SCHEMA$.getField("segments_timbre").schema());
            this.segments_timbre = a13;
          } else a13.clear();
          SpecificData.Array<java.util.List<java.lang.Double>> ga13 = (a13 instanceof SpecificData.Array ? (SpecificData.Array<java.util.List<java.lang.Double>>)a13 : null);
          for ( ; 0 < size13; size13 = in.arrayNext()) {
            for ( ; size13 != 0; size13--) {
              java.util.List<java.lang.Double> e13 = (ga13 != null ? ga13.peek() : null);
              long size14 = in.readArrayStart();
              java.util.List<java.lang.Double> a14 = e13;
              if (a14 == null) {
                a14 = new SpecificData.Array<java.lang.Double>((int)size14, SCHEMA$.getField("segments_timbre").schema().getElementType());
                e13 = a14;
              } else a14.clear();
              SpecificData.Array<java.lang.Double> ga14 = (a14 instanceof SpecificData.Array ? (SpecificData.Array<java.lang.Double>)a14 : null);
              for ( ; 0 < size14; size14 = in.arrayNext()) {
                for ( ; size14 != 0; size14--) {
                  java.lang.Double e14 = (ga14 != null ? ga14.peek() : null);
                  e14 = in.readDouble();
                  a14.add(e14);
                }
              }
              a13.add(e13);
            }
          }
          break;

        case 13:
          if (this.songs == null) {
            this.songs = new song.avro.songs();
          }
          this.songs.customDecode(in);
          break;

        case 14:
          if (in.readIndex() != 1) {
            in.readNull();
            this.tatums_confidence = null;
          } else {
            long size15 = in.readArrayStart();
            java.util.List<java.lang.Double> a15 = this.tatums_confidence;
            if (a15 == null) {
              a15 = new SpecificData.Array<java.lang.Double>((int)size15, SCHEMA$.getField("tatums_confidence").schema().getTypes().get(1));
              this.tatums_confidence = a15;
            } else a15.clear();
            SpecificData.Array<java.lang.Double> ga15 = (a15 instanceof SpecificData.Array ? (SpecificData.Array<java.lang.Double>)a15 : null);
            for ( ; 0 < size15; size15 = in.arrayNext()) {
              for ( ; size15 != 0; size15--) {
                java.lang.Double e15 = (ga15 != null ? ga15.peek() : null);
                e15 = in.readDouble();
                a15.add(e15);
              }
            }
          }
          break;

        case 15:
          if (in.readIndex() != 1) {
            in.readNull();
            this.tatums_start = null;
          } else {
            long size16 = in.readArrayStart();
            java.util.List<java.lang.Double> a16 = this.tatums_start;
            if (a16 == null) {
              a16 = new SpecificData.Array<java.lang.Double>((int)size16, SCHEMA$.getField("tatums_start").schema().getTypes().get(1));
              this.tatums_start = a16;
            } else a16.clear();
            SpecificData.Array<java.lang.Double> ga16 = (a16 instanceof SpecificData.Array ? (SpecificData.Array<java.lang.Double>)a16 : null);
            for ( ; 0 < size16; size16 = in.arrayNext()) {
              for ( ; size16 != 0; size16--) {
                java.lang.Double e16 = (ga16 != null ? ga16.peek() : null);
                e16 = in.readDouble();
                a16.add(e16);
              }
            }
          }
          break;

        default:
          throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}










