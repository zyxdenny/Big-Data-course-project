/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package song.avro;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@org.apache.avro.specific.AvroGenerated
public class metadata_songs extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 7490821725715735046L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"metadata_songs\",\"namespace\":\"song.avro\",\"fields\":[{\"name\":\"analyzer_version\",\"type\":{\"type\":\"array\",\"items\":\"string\",\"default\":[]}},{\"name\":\"artist_7digitalid\",\"type\":{\"type\":\"array\",\"items\":\"int\",\"default\":[]}},{\"name\":\"artist_familiarity\",\"type\":{\"type\":\"array\",\"items\":\"double\",\"default\":[]}},{\"name\":\"artist_hotttnesss\",\"type\":{\"type\":\"array\",\"items\":\"double\",\"default\":[]}},{\"name\":\"artist_id\",\"type\":{\"type\":\"array\",\"items\":\"string\",\"default\":[]}},{\"name\":\"artist_latitude\",\"type\":{\"type\":\"array\",\"items\":\"double\",\"default\":[]}},{\"name\":\"artist_location\",\"type\":{\"type\":\"array\",\"items\":\"string\",\"default\":[]}},{\"name\":\"artist_longitude\",\"type\":{\"type\":\"array\",\"items\":\"double\",\"default\":[]}},{\"name\":\"artist_mbid\",\"type\":{\"type\":\"array\",\"items\":\"string\",\"default\":[]}},{\"name\":\"artist_name\",\"type\":{\"type\":\"array\",\"items\":\"string\",\"default\":[]}},{\"name\":\"artist_playmeid\",\"type\":[\"null\",{\"type\":\"array\",\"items\":\"int\",\"default\":[]}]},{\"name\":\"genre\",\"type\":{\"type\":\"array\",\"items\":\"string\",\"default\":[]}},{\"name\":\"idx_artist_terms\",\"type\":[\"null\",{\"type\":\"array\",\"items\":\"int\",\"default\":[]}]},{\"name\":\"idx_similar_artists\",\"type\":[\"null\",{\"type\":\"array\",\"items\":\"int\",\"default\":[]}]},{\"name\":\"release\",\"type\":{\"type\":\"array\",\"items\":\"string\",\"default\":[]}},{\"name\":\"release_7digitalid\",\"type\":[{\"type\":\"array\",\"items\":\"int\",\"default\":[]},\"null\"],\"default\":[]},{\"name\":\"song_hotttnesss\",\"type\":{\"type\":\"array\",\"items\":\"double\",\"default\":[]}},{\"name\":\"song_id\",\"type\":{\"type\":\"array\",\"items\":\"string\",\"default\":[]}},{\"name\":\"title\",\"type\":{\"type\":\"array\",\"items\":\"string\",\"default\":[]}},{\"name\":\"track_7digitalid\",\"type\":[\"null\",{\"type\":\"array\",\"items\":\"int\",\"default\":[]}]}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<metadata_songs> ENCODER =
      new BinaryMessageEncoder<metadata_songs>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<metadata_songs> DECODER =
      new BinaryMessageDecoder<metadata_songs>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<metadata_songs> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<metadata_songs> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<metadata_songs> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<metadata_songs>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this metadata_songs to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a metadata_songs from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a metadata_songs instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static metadata_songs fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

   private java.util.List<java.lang.CharSequence> analyzer_version;
   private java.util.List<java.lang.Integer> artist_7digitalid;
   private java.util.List<java.lang.Double> artist_familiarity;
   private java.util.List<java.lang.Double> artist_hotttnesss;
   private java.util.List<java.lang.CharSequence> artist_id;
   private java.util.List<java.lang.Double> artist_latitude;
   private java.util.List<java.lang.CharSequence> artist_location;
   private java.util.List<java.lang.Double> artist_longitude;
   private java.util.List<java.lang.CharSequence> artist_mbid;
   private java.util.List<java.lang.CharSequence> artist_name;
   private java.util.List<java.lang.Integer> artist_playmeid;
   private java.util.List<java.lang.CharSequence> genre;
   private java.util.List<java.lang.Integer> idx_artist_terms;
   private java.util.List<java.lang.Integer> idx_similar_artists;
   private java.util.List<java.lang.CharSequence> release;
   private java.util.List<java.lang.Integer> release_7digitalid;
   private java.util.List<java.lang.Double> song_hotttnesss;
   private java.util.List<java.lang.CharSequence> song_id;
   private java.util.List<java.lang.CharSequence> title;
   private java.util.List<java.lang.Integer> track_7digitalid;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public metadata_songs() {}

  /**
   * All-args constructor.
   * @param analyzer_version The new value for analyzer_version
   * @param artist_7digitalid The new value for artist_7digitalid
   * @param artist_familiarity The new value for artist_familiarity
   * @param artist_hotttnesss The new value for artist_hotttnesss
   * @param artist_id The new value for artist_id
   * @param artist_latitude The new value for artist_latitude
   * @param artist_location The new value for artist_location
   * @param artist_longitude The new value for artist_longitude
   * @param artist_mbid The new value for artist_mbid
   * @param artist_name The new value for artist_name
   * @param artist_playmeid The new value for artist_playmeid
   * @param genre The new value for genre
   * @param idx_artist_terms The new value for idx_artist_terms
   * @param idx_similar_artists The new value for idx_similar_artists
   * @param release The new value for release
   * @param release_7digitalid The new value for release_7digitalid
   * @param song_hotttnesss The new value for song_hotttnesss
   * @param song_id The new value for song_id
   * @param title The new value for title
   * @param track_7digitalid The new value for track_7digitalid
   */
  public metadata_songs(java.util.List<java.lang.CharSequence> analyzer_version, java.util.List<java.lang.Integer> artist_7digitalid, java.util.List<java.lang.Double> artist_familiarity, java.util.List<java.lang.Double> artist_hotttnesss, java.util.List<java.lang.CharSequence> artist_id, java.util.List<java.lang.Double> artist_latitude, java.util.List<java.lang.CharSequence> artist_location, java.util.List<java.lang.Double> artist_longitude, java.util.List<java.lang.CharSequence> artist_mbid, java.util.List<java.lang.CharSequence> artist_name, java.util.List<java.lang.Integer> artist_playmeid, java.util.List<java.lang.CharSequence> genre, java.util.List<java.lang.Integer> idx_artist_terms, java.util.List<java.lang.Integer> idx_similar_artists, java.util.List<java.lang.CharSequence> release, java.util.List<java.lang.Integer> release_7digitalid, java.util.List<java.lang.Double> song_hotttnesss, java.util.List<java.lang.CharSequence> song_id, java.util.List<java.lang.CharSequence> title, java.util.List<java.lang.Integer> track_7digitalid) {
    this.analyzer_version = analyzer_version;
    this.artist_7digitalid = artist_7digitalid;
    this.artist_familiarity = artist_familiarity;
    this.artist_hotttnesss = artist_hotttnesss;
    this.artist_id = artist_id;
    this.artist_latitude = artist_latitude;
    this.artist_location = artist_location;
    this.artist_longitude = artist_longitude;
    this.artist_mbid = artist_mbid;
    this.artist_name = artist_name;
    this.artist_playmeid = artist_playmeid;
    this.genre = genre;
    this.idx_artist_terms = idx_artist_terms;
    this.idx_similar_artists = idx_similar_artists;
    this.release = release;
    this.release_7digitalid = release_7digitalid;
    this.song_hotttnesss = song_hotttnesss;
    this.song_id = song_id;
    this.title = title;
    this.track_7digitalid = track_7digitalid;
  }

  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return analyzer_version;
    case 1: return artist_7digitalid;
    case 2: return artist_familiarity;
    case 3: return artist_hotttnesss;
    case 4: return artist_id;
    case 5: return artist_latitude;
    case 6: return artist_location;
    case 7: return artist_longitude;
    case 8: return artist_mbid;
    case 9: return artist_name;
    case 10: return artist_playmeid;
    case 11: return genre;
    case 12: return idx_artist_terms;
    case 13: return idx_similar_artists;
    case 14: return release;
    case 15: return release_7digitalid;
    case 16: return song_hotttnesss;
    case 17: return song_id;
    case 18: return title;
    case 19: return track_7digitalid;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: analyzer_version = (java.util.List<java.lang.CharSequence>)value$; break;
    case 1: artist_7digitalid = (java.util.List<java.lang.Integer>)value$; break;
    case 2: artist_familiarity = (java.util.List<java.lang.Double>)value$; break;
    case 3: artist_hotttnesss = (java.util.List<java.lang.Double>)value$; break;
    case 4: artist_id = (java.util.List<java.lang.CharSequence>)value$; break;
    case 5: artist_latitude = (java.util.List<java.lang.Double>)value$; break;
    case 6: artist_location = (java.util.List<java.lang.CharSequence>)value$; break;
    case 7: artist_longitude = (java.util.List<java.lang.Double>)value$; break;
    case 8: artist_mbid = (java.util.List<java.lang.CharSequence>)value$; break;
    case 9: artist_name = (java.util.List<java.lang.CharSequence>)value$; break;
    case 10: artist_playmeid = (java.util.List<java.lang.Integer>)value$; break;
    case 11: genre = (java.util.List<java.lang.CharSequence>)value$; break;
    case 12: idx_artist_terms = (java.util.List<java.lang.Integer>)value$; break;
    case 13: idx_similar_artists = (java.util.List<java.lang.Integer>)value$; break;
    case 14: release = (java.util.List<java.lang.CharSequence>)value$; break;
    case 15: release_7digitalid = (java.util.List<java.lang.Integer>)value$; break;
    case 16: song_hotttnesss = (java.util.List<java.lang.Double>)value$; break;
    case 17: song_id = (java.util.List<java.lang.CharSequence>)value$; break;
    case 18: title = (java.util.List<java.lang.CharSequence>)value$; break;
    case 19: track_7digitalid = (java.util.List<java.lang.Integer>)value$; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'analyzer_version' field.
   * @return The value of the 'analyzer_version' field.
   */
  public java.util.List<java.lang.CharSequence> getAnalyzerVersion() {
    return analyzer_version;
  }


  /**
   * Sets the value of the 'analyzer_version' field.
   * @param value the value to set.
   */
  public void setAnalyzerVersion(java.util.List<java.lang.CharSequence> value) {
    this.analyzer_version = value;
  }

  /**
   * Gets the value of the 'artist_7digitalid' field.
   * @return The value of the 'artist_7digitalid' field.
   */
  public java.util.List<java.lang.Integer> getArtist7digitalid() {
    return artist_7digitalid;
  }


  /**
   * Sets the value of the 'artist_7digitalid' field.
   * @param value the value to set.
   */
  public void setArtist7digitalid(java.util.List<java.lang.Integer> value) {
    this.artist_7digitalid = value;
  }

  /**
   * Gets the value of the 'artist_familiarity' field.
   * @return The value of the 'artist_familiarity' field.
   */
  public java.util.List<java.lang.Double> getArtistFamiliarity() {
    return artist_familiarity;
  }


  /**
   * Sets the value of the 'artist_familiarity' field.
   * @param value the value to set.
   */
  public void setArtistFamiliarity(java.util.List<java.lang.Double> value) {
    this.artist_familiarity = value;
  }

  /**
   * Gets the value of the 'artist_hotttnesss' field.
   * @return The value of the 'artist_hotttnesss' field.
   */
  public java.util.List<java.lang.Double> getArtistHotttnesss() {
    return artist_hotttnesss;
  }


  /**
   * Sets the value of the 'artist_hotttnesss' field.
   * @param value the value to set.
   */
  public void setArtistHotttnesss(java.util.List<java.lang.Double> value) {
    this.artist_hotttnesss = value;
  }

  /**
   * Gets the value of the 'artist_id' field.
   * @return The value of the 'artist_id' field.
   */
  public java.util.List<java.lang.CharSequence> getArtistId() {
    return artist_id;
  }


  /**
   * Sets the value of the 'artist_id' field.
   * @param value the value to set.
   */
  public void setArtistId(java.util.List<java.lang.CharSequence> value) {
    this.artist_id = value;
  }

  /**
   * Gets the value of the 'artist_latitude' field.
   * @return The value of the 'artist_latitude' field.
   */
  public java.util.List<java.lang.Double> getArtistLatitude() {
    return artist_latitude;
  }


  /**
   * Sets the value of the 'artist_latitude' field.
   * @param value the value to set.
   */
  public void setArtistLatitude(java.util.List<java.lang.Double> value) {
    this.artist_latitude = value;
  }

  /**
   * Gets the value of the 'artist_location' field.
   * @return The value of the 'artist_location' field.
   */
  public java.util.List<java.lang.CharSequence> getArtistLocation() {
    return artist_location;
  }


  /**
   * Sets the value of the 'artist_location' field.
   * @param value the value to set.
   */
  public void setArtistLocation(java.util.List<java.lang.CharSequence> value) {
    this.artist_location = value;
  }

  /**
   * Gets the value of the 'artist_longitude' field.
   * @return The value of the 'artist_longitude' field.
   */
  public java.util.List<java.lang.Double> getArtistLongitude() {
    return artist_longitude;
  }


  /**
   * Sets the value of the 'artist_longitude' field.
   * @param value the value to set.
   */
  public void setArtistLongitude(java.util.List<java.lang.Double> value) {
    this.artist_longitude = value;
  }

  /**
   * Gets the value of the 'artist_mbid' field.
   * @return The value of the 'artist_mbid' field.
   */
  public java.util.List<java.lang.CharSequence> getArtistMbid() {
    return artist_mbid;
  }


  /**
   * Sets the value of the 'artist_mbid' field.
   * @param value the value to set.
   */
  public void setArtistMbid(java.util.List<java.lang.CharSequence> value) {
    this.artist_mbid = value;
  }

  /**
   * Gets the value of the 'artist_name' field.
   * @return The value of the 'artist_name' field.
   */
  public java.util.List<java.lang.CharSequence> getArtistName() {
    return artist_name;
  }


  /**
   * Sets the value of the 'artist_name' field.
   * @param value the value to set.
   */
  public void setArtistName(java.util.List<java.lang.CharSequence> value) {
    this.artist_name = value;
  }

  /**
   * Gets the value of the 'artist_playmeid' field.
   * @return The value of the 'artist_playmeid' field.
   */
  public java.util.List<java.lang.Integer> getArtistPlaymeid() {
    return artist_playmeid;
  }


  /**
   * Sets the value of the 'artist_playmeid' field.
   * @param value the value to set.
   */
  public void setArtistPlaymeid(java.util.List<java.lang.Integer> value) {
    this.artist_playmeid = value;
  }

  /**
   * Gets the value of the 'genre' field.
   * @return The value of the 'genre' field.
   */
  public java.util.List<java.lang.CharSequence> getGenre() {
    return genre;
  }


  /**
   * Sets the value of the 'genre' field.
   * @param value the value to set.
   */
  public void setGenre(java.util.List<java.lang.CharSequence> value) {
    this.genre = value;
  }

  /**
   * Gets the value of the 'idx_artist_terms' field.
   * @return The value of the 'idx_artist_terms' field.
   */
  public java.util.List<java.lang.Integer> getIdxArtistTerms() {
    return idx_artist_terms;
  }


  /**
   * Sets the value of the 'idx_artist_terms' field.
   * @param value the value to set.
   */
  public void setIdxArtistTerms(java.util.List<java.lang.Integer> value) {
    this.idx_artist_terms = value;
  }

  /**
   * Gets the value of the 'idx_similar_artists' field.
   * @return The value of the 'idx_similar_artists' field.
   */
  public java.util.List<java.lang.Integer> getIdxSimilarArtists() {
    return idx_similar_artists;
  }


  /**
   * Sets the value of the 'idx_similar_artists' field.
   * @param value the value to set.
   */
  public void setIdxSimilarArtists(java.util.List<java.lang.Integer> value) {
    this.idx_similar_artists = value;
  }

  /**
   * Gets the value of the 'release' field.
   * @return The value of the 'release' field.
   */
  public java.util.List<java.lang.CharSequence> getRelease() {
    return release;
  }


  /**
   * Sets the value of the 'release' field.
   * @param value the value to set.
   */
  public void setRelease(java.util.List<java.lang.CharSequence> value) {
    this.release = value;
  }

  /**
   * Gets the value of the 'release_7digitalid' field.
   * @return The value of the 'release_7digitalid' field.
   */
  public java.util.List<java.lang.Integer> getRelease7digitalid() {
    return release_7digitalid;
  }


  /**
   * Sets the value of the 'release_7digitalid' field.
   * @param value the value to set.
   */
  public void setRelease7digitalid(java.util.List<java.lang.Integer> value) {
    this.release_7digitalid = value;
  }

  /**
   * Gets the value of the 'song_hotttnesss' field.
   * @return The value of the 'song_hotttnesss' field.
   */
  public java.util.List<java.lang.Double> getSongHotttnesss() {
    return song_hotttnesss;
  }


  /**
   * Sets the value of the 'song_hotttnesss' field.
   * @param value the value to set.
   */
  public void setSongHotttnesss(java.util.List<java.lang.Double> value) {
    this.song_hotttnesss = value;
  }

  /**
   * Gets the value of the 'song_id' field.
   * @return The value of the 'song_id' field.
   */
  public java.util.List<java.lang.CharSequence> getSongId() {
    return song_id;
  }


  /**
   * Sets the value of the 'song_id' field.
   * @param value the value to set.
   */
  public void setSongId(java.util.List<java.lang.CharSequence> value) {
    this.song_id = value;
  }

  /**
   * Gets the value of the 'title' field.
   * @return The value of the 'title' field.
   */
  public java.util.List<java.lang.CharSequence> getTitle() {
    return title;
  }


  /**
   * Sets the value of the 'title' field.
   * @param value the value to set.
   */
  public void setTitle(java.util.List<java.lang.CharSequence> value) {
    this.title = value;
  }

  /**
   * Gets the value of the 'track_7digitalid' field.
   * @return The value of the 'track_7digitalid' field.
   */
  public java.util.List<java.lang.Integer> getTrack7digitalid() {
    return track_7digitalid;
  }


  /**
   * Sets the value of the 'track_7digitalid' field.
   * @param value the value to set.
   */
  public void setTrack7digitalid(java.util.List<java.lang.Integer> value) {
    this.track_7digitalid = value;
  }

  /**
   * Creates a new metadata_songs RecordBuilder.
   * @return A new metadata_songs RecordBuilder
   */
  public static song.avro.metadata_songs.Builder newBuilder() {
    return new song.avro.metadata_songs.Builder();
  }

  /**
   * Creates a new metadata_songs RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new metadata_songs RecordBuilder
   */
  public static song.avro.metadata_songs.Builder newBuilder(song.avro.metadata_songs.Builder other) {
    if (other == null) {
      return new song.avro.metadata_songs.Builder();
    } else {
      return new song.avro.metadata_songs.Builder(other);
    }
  }

  /**
   * Creates a new metadata_songs RecordBuilder by copying an existing metadata_songs instance.
   * @param other The existing instance to copy.
   * @return A new metadata_songs RecordBuilder
   */
  public static song.avro.metadata_songs.Builder newBuilder(song.avro.metadata_songs other) {
    if (other == null) {
      return new song.avro.metadata_songs.Builder();
    } else {
      return new song.avro.metadata_songs.Builder(other);
    }
  }

  /**
   * RecordBuilder for metadata_songs instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<metadata_songs>
    implements org.apache.avro.data.RecordBuilder<metadata_songs> {

    private java.util.List<java.lang.CharSequence> analyzer_version;
    private java.util.List<java.lang.Integer> artist_7digitalid;
    private java.util.List<java.lang.Double> artist_familiarity;
    private java.util.List<java.lang.Double> artist_hotttnesss;
    private java.util.List<java.lang.CharSequence> artist_id;
    private java.util.List<java.lang.Double> artist_latitude;
    private java.util.List<java.lang.CharSequence> artist_location;
    private java.util.List<java.lang.Double> artist_longitude;
    private java.util.List<java.lang.CharSequence> artist_mbid;
    private java.util.List<java.lang.CharSequence> artist_name;
    private java.util.List<java.lang.Integer> artist_playmeid;
    private java.util.List<java.lang.CharSequence> genre;
    private java.util.List<java.lang.Integer> idx_artist_terms;
    private java.util.List<java.lang.Integer> idx_similar_artists;
    private java.util.List<java.lang.CharSequence> release;
    private java.util.List<java.lang.Integer> release_7digitalid;
    private java.util.List<java.lang.Double> song_hotttnesss;
    private java.util.List<java.lang.CharSequence> song_id;
    private java.util.List<java.lang.CharSequence> title;
    private java.util.List<java.lang.Integer> track_7digitalid;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(song.avro.metadata_songs.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.analyzer_version)) {
        this.analyzer_version = data().deepCopy(fields()[0].schema(), other.analyzer_version);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.artist_7digitalid)) {
        this.artist_7digitalid = data().deepCopy(fields()[1].schema(), other.artist_7digitalid);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.artist_familiarity)) {
        this.artist_familiarity = data().deepCopy(fields()[2].schema(), other.artist_familiarity);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (isValidValue(fields()[3], other.artist_hotttnesss)) {
        this.artist_hotttnesss = data().deepCopy(fields()[3].schema(), other.artist_hotttnesss);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
      if (isValidValue(fields()[4], other.artist_id)) {
        this.artist_id = data().deepCopy(fields()[4].schema(), other.artist_id);
        fieldSetFlags()[4] = other.fieldSetFlags()[4];
      }
      if (isValidValue(fields()[5], other.artist_latitude)) {
        this.artist_latitude = data().deepCopy(fields()[5].schema(), other.artist_latitude);
        fieldSetFlags()[5] = other.fieldSetFlags()[5];
      }
      if (isValidValue(fields()[6], other.artist_location)) {
        this.artist_location = data().deepCopy(fields()[6].schema(), other.artist_location);
        fieldSetFlags()[6] = other.fieldSetFlags()[6];
      }
      if (isValidValue(fields()[7], other.artist_longitude)) {
        this.artist_longitude = data().deepCopy(fields()[7].schema(), other.artist_longitude);
        fieldSetFlags()[7] = other.fieldSetFlags()[7];
      }
      if (isValidValue(fields()[8], other.artist_mbid)) {
        this.artist_mbid = data().deepCopy(fields()[8].schema(), other.artist_mbid);
        fieldSetFlags()[8] = other.fieldSetFlags()[8];
      }
      if (isValidValue(fields()[9], other.artist_name)) {
        this.artist_name = data().deepCopy(fields()[9].schema(), other.artist_name);
        fieldSetFlags()[9] = other.fieldSetFlags()[9];
      }
      if (isValidValue(fields()[10], other.artist_playmeid)) {
        this.artist_playmeid = data().deepCopy(fields()[10].schema(), other.artist_playmeid);
        fieldSetFlags()[10] = other.fieldSetFlags()[10];
      }
      if (isValidValue(fields()[11], other.genre)) {
        this.genre = data().deepCopy(fields()[11].schema(), other.genre);
        fieldSetFlags()[11] = other.fieldSetFlags()[11];
      }
      if (isValidValue(fields()[12], other.idx_artist_terms)) {
        this.idx_artist_terms = data().deepCopy(fields()[12].schema(), other.idx_artist_terms);
        fieldSetFlags()[12] = other.fieldSetFlags()[12];
      }
      if (isValidValue(fields()[13], other.idx_similar_artists)) {
        this.idx_similar_artists = data().deepCopy(fields()[13].schema(), other.idx_similar_artists);
        fieldSetFlags()[13] = other.fieldSetFlags()[13];
      }
      if (isValidValue(fields()[14], other.release)) {
        this.release = data().deepCopy(fields()[14].schema(), other.release);
        fieldSetFlags()[14] = other.fieldSetFlags()[14];
      }
      if (isValidValue(fields()[15], other.release_7digitalid)) {
        this.release_7digitalid = data().deepCopy(fields()[15].schema(), other.release_7digitalid);
        fieldSetFlags()[15] = other.fieldSetFlags()[15];
      }
      if (isValidValue(fields()[16], other.song_hotttnesss)) {
        this.song_hotttnesss = data().deepCopy(fields()[16].schema(), other.song_hotttnesss);
        fieldSetFlags()[16] = other.fieldSetFlags()[16];
      }
      if (isValidValue(fields()[17], other.song_id)) {
        this.song_id = data().deepCopy(fields()[17].schema(), other.song_id);
        fieldSetFlags()[17] = other.fieldSetFlags()[17];
      }
      if (isValidValue(fields()[18], other.title)) {
        this.title = data().deepCopy(fields()[18].schema(), other.title);
        fieldSetFlags()[18] = other.fieldSetFlags()[18];
      }
      if (isValidValue(fields()[19], other.track_7digitalid)) {
        this.track_7digitalid = data().deepCopy(fields()[19].schema(), other.track_7digitalid);
        fieldSetFlags()[19] = other.fieldSetFlags()[19];
      }
    }

    /**
     * Creates a Builder by copying an existing metadata_songs instance
     * @param other The existing instance to copy.
     */
    private Builder(song.avro.metadata_songs other) {
      super(SCHEMA$);
      if (isValidValue(fields()[0], other.analyzer_version)) {
        this.analyzer_version = data().deepCopy(fields()[0].schema(), other.analyzer_version);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.artist_7digitalid)) {
        this.artist_7digitalid = data().deepCopy(fields()[1].schema(), other.artist_7digitalid);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.artist_familiarity)) {
        this.artist_familiarity = data().deepCopy(fields()[2].schema(), other.artist_familiarity);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.artist_hotttnesss)) {
        this.artist_hotttnesss = data().deepCopy(fields()[3].schema(), other.artist_hotttnesss);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.artist_id)) {
        this.artist_id = data().deepCopy(fields()[4].schema(), other.artist_id);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.artist_latitude)) {
        this.artist_latitude = data().deepCopy(fields()[5].schema(), other.artist_latitude);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.artist_location)) {
        this.artist_location = data().deepCopy(fields()[6].schema(), other.artist_location);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.artist_longitude)) {
        this.artist_longitude = data().deepCopy(fields()[7].schema(), other.artist_longitude);
        fieldSetFlags()[7] = true;
      }
      if (isValidValue(fields()[8], other.artist_mbid)) {
        this.artist_mbid = data().deepCopy(fields()[8].schema(), other.artist_mbid);
        fieldSetFlags()[8] = true;
      }
      if (isValidValue(fields()[9], other.artist_name)) {
        this.artist_name = data().deepCopy(fields()[9].schema(), other.artist_name);
        fieldSetFlags()[9] = true;
      }
      if (isValidValue(fields()[10], other.artist_playmeid)) {
        this.artist_playmeid = data().deepCopy(fields()[10].schema(), other.artist_playmeid);
        fieldSetFlags()[10] = true;
      }
      if (isValidValue(fields()[11], other.genre)) {
        this.genre = data().deepCopy(fields()[11].schema(), other.genre);
        fieldSetFlags()[11] = true;
      }
      if (isValidValue(fields()[12], other.idx_artist_terms)) {
        this.idx_artist_terms = data().deepCopy(fields()[12].schema(), other.idx_artist_terms);
        fieldSetFlags()[12] = true;
      }
      if (isValidValue(fields()[13], other.idx_similar_artists)) {
        this.idx_similar_artists = data().deepCopy(fields()[13].schema(), other.idx_similar_artists);
        fieldSetFlags()[13] = true;
      }
      if (isValidValue(fields()[14], other.release)) {
        this.release = data().deepCopy(fields()[14].schema(), other.release);
        fieldSetFlags()[14] = true;
      }
      if (isValidValue(fields()[15], other.release_7digitalid)) {
        this.release_7digitalid = data().deepCopy(fields()[15].schema(), other.release_7digitalid);
        fieldSetFlags()[15] = true;
      }
      if (isValidValue(fields()[16], other.song_hotttnesss)) {
        this.song_hotttnesss = data().deepCopy(fields()[16].schema(), other.song_hotttnesss);
        fieldSetFlags()[16] = true;
      }
      if (isValidValue(fields()[17], other.song_id)) {
        this.song_id = data().deepCopy(fields()[17].schema(), other.song_id);
        fieldSetFlags()[17] = true;
      }
      if (isValidValue(fields()[18], other.title)) {
        this.title = data().deepCopy(fields()[18].schema(), other.title);
        fieldSetFlags()[18] = true;
      }
      if (isValidValue(fields()[19], other.track_7digitalid)) {
        this.track_7digitalid = data().deepCopy(fields()[19].schema(), other.track_7digitalid);
        fieldSetFlags()[19] = true;
      }
    }

    /**
      * Gets the value of the 'analyzer_version' field.
      * @return The value.
      */
    public java.util.List<java.lang.CharSequence> getAnalyzerVersion() {
      return analyzer_version;
    }


    /**
      * Sets the value of the 'analyzer_version' field.
      * @param value The value of 'analyzer_version'.
      * @return This builder.
      */
    public song.avro.metadata_songs.Builder setAnalyzerVersion(java.util.List<java.lang.CharSequence> value) {
      validate(fields()[0], value);
      this.analyzer_version = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'analyzer_version' field has been set.
      * @return True if the 'analyzer_version' field has been set, false otherwise.
      */
    public boolean hasAnalyzerVersion() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'analyzer_version' field.
      * @return This builder.
      */
    public song.avro.metadata_songs.Builder clearAnalyzerVersion() {
      analyzer_version = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'artist_7digitalid' field.
      * @return The value.
      */
    public java.util.List<java.lang.Integer> getArtist7digitalid() {
      return artist_7digitalid;
    }


    /**
      * Sets the value of the 'artist_7digitalid' field.
      * @param value The value of 'artist_7digitalid'.
      * @return This builder.
      */
    public song.avro.metadata_songs.Builder setArtist7digitalid(java.util.List<java.lang.Integer> value) {
      validate(fields()[1], value);
      this.artist_7digitalid = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'artist_7digitalid' field has been set.
      * @return True if the 'artist_7digitalid' field has been set, false otherwise.
      */
    public boolean hasArtist7digitalid() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'artist_7digitalid' field.
      * @return This builder.
      */
    public song.avro.metadata_songs.Builder clearArtist7digitalid() {
      artist_7digitalid = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'artist_familiarity' field.
      * @return The value.
      */
    public java.util.List<java.lang.Double> getArtistFamiliarity() {
      return artist_familiarity;
    }


    /**
      * Sets the value of the 'artist_familiarity' field.
      * @param value The value of 'artist_familiarity'.
      * @return This builder.
      */
    public song.avro.metadata_songs.Builder setArtistFamiliarity(java.util.List<java.lang.Double> value) {
      validate(fields()[2], value);
      this.artist_familiarity = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'artist_familiarity' field has been set.
      * @return True if the 'artist_familiarity' field has been set, false otherwise.
      */
    public boolean hasArtistFamiliarity() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'artist_familiarity' field.
      * @return This builder.
      */
    public song.avro.metadata_songs.Builder clearArtistFamiliarity() {
      artist_familiarity = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'artist_hotttnesss' field.
      * @return The value.
      */
    public java.util.List<java.lang.Double> getArtistHotttnesss() {
      return artist_hotttnesss;
    }


    /**
      * Sets the value of the 'artist_hotttnesss' field.
      * @param value The value of 'artist_hotttnesss'.
      * @return This builder.
      */
    public song.avro.metadata_songs.Builder setArtistHotttnesss(java.util.List<java.lang.Double> value) {
      validate(fields()[3], value);
      this.artist_hotttnesss = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'artist_hotttnesss' field has been set.
      * @return True if the 'artist_hotttnesss' field has been set, false otherwise.
      */
    public boolean hasArtistHotttnesss() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'artist_hotttnesss' field.
      * @return This builder.
      */
    public song.avro.metadata_songs.Builder clearArtistHotttnesss() {
      artist_hotttnesss = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'artist_id' field.
      * @return The value.
      */
    public java.util.List<java.lang.CharSequence> getArtistId() {
      return artist_id;
    }


    /**
      * Sets the value of the 'artist_id' field.
      * @param value The value of 'artist_id'.
      * @return This builder.
      */
    public song.avro.metadata_songs.Builder setArtistId(java.util.List<java.lang.CharSequence> value) {
      validate(fields()[4], value);
      this.artist_id = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'artist_id' field has been set.
      * @return True if the 'artist_id' field has been set, false otherwise.
      */
    public boolean hasArtistId() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'artist_id' field.
      * @return This builder.
      */
    public song.avro.metadata_songs.Builder clearArtistId() {
      artist_id = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'artist_latitude' field.
      * @return The value.
      */
    public java.util.List<java.lang.Double> getArtistLatitude() {
      return artist_latitude;
    }


    /**
      * Sets the value of the 'artist_latitude' field.
      * @param value The value of 'artist_latitude'.
      * @return This builder.
      */
    public song.avro.metadata_songs.Builder setArtistLatitude(java.util.List<java.lang.Double> value) {
      validate(fields()[5], value);
      this.artist_latitude = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'artist_latitude' field has been set.
      * @return True if the 'artist_latitude' field has been set, false otherwise.
      */
    public boolean hasArtistLatitude() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'artist_latitude' field.
      * @return This builder.
      */
    public song.avro.metadata_songs.Builder clearArtistLatitude() {
      artist_latitude = null;
      fieldSetFlags()[5] = false;
      return this;
    }

    /**
      * Gets the value of the 'artist_location' field.
      * @return The value.
      */
    public java.util.List<java.lang.CharSequence> getArtistLocation() {
      return artist_location;
    }


    /**
      * Sets the value of the 'artist_location' field.
      * @param value The value of 'artist_location'.
      * @return This builder.
      */
    public song.avro.metadata_songs.Builder setArtistLocation(java.util.List<java.lang.CharSequence> value) {
      validate(fields()[6], value);
      this.artist_location = value;
      fieldSetFlags()[6] = true;
      return this;
    }

    /**
      * Checks whether the 'artist_location' field has been set.
      * @return True if the 'artist_location' field has been set, false otherwise.
      */
    public boolean hasArtistLocation() {
      return fieldSetFlags()[6];
    }


    /**
      * Clears the value of the 'artist_location' field.
      * @return This builder.
      */
    public song.avro.metadata_songs.Builder clearArtistLocation() {
      artist_location = null;
      fieldSetFlags()[6] = false;
      return this;
    }

    /**
      * Gets the value of the 'artist_longitude' field.
      * @return The value.
      */
    public java.util.List<java.lang.Double> getArtistLongitude() {
      return artist_longitude;
    }


    /**
      * Sets the value of the 'artist_longitude' field.
      * @param value The value of 'artist_longitude'.
      * @return This builder.
      */
    public song.avro.metadata_songs.Builder setArtistLongitude(java.util.List<java.lang.Double> value) {
      validate(fields()[7], value);
      this.artist_longitude = value;
      fieldSetFlags()[7] = true;
      return this;
    }

    /**
      * Checks whether the 'artist_longitude' field has been set.
      * @return True if the 'artist_longitude' field has been set, false otherwise.
      */
    public boolean hasArtistLongitude() {
      return fieldSetFlags()[7];
    }


    /**
      * Clears the value of the 'artist_longitude' field.
      * @return This builder.
      */
    public song.avro.metadata_songs.Builder clearArtistLongitude() {
      artist_longitude = null;
      fieldSetFlags()[7] = false;
      return this;
    }

    /**
      * Gets the value of the 'artist_mbid' field.
      * @return The value.
      */
    public java.util.List<java.lang.CharSequence> getArtistMbid() {
      return artist_mbid;
    }


    /**
      * Sets the value of the 'artist_mbid' field.
      * @param value The value of 'artist_mbid'.
      * @return This builder.
      */
    public song.avro.metadata_songs.Builder setArtistMbid(java.util.List<java.lang.CharSequence> value) {
      validate(fields()[8], value);
      this.artist_mbid = value;
      fieldSetFlags()[8] = true;
      return this;
    }

    /**
      * Checks whether the 'artist_mbid' field has been set.
      * @return True if the 'artist_mbid' field has been set, false otherwise.
      */
    public boolean hasArtistMbid() {
      return fieldSetFlags()[8];
    }


    /**
      * Clears the value of the 'artist_mbid' field.
      * @return This builder.
      */
    public song.avro.metadata_songs.Builder clearArtistMbid() {
      artist_mbid = null;
      fieldSetFlags()[8] = false;
      return this;
    }

    /**
      * Gets the value of the 'artist_name' field.
      * @return The value.
      */
    public java.util.List<java.lang.CharSequence> getArtistName() {
      return artist_name;
    }


    /**
      * Sets the value of the 'artist_name' field.
      * @param value The value of 'artist_name'.
      * @return This builder.
      */
    public song.avro.metadata_songs.Builder setArtistName(java.util.List<java.lang.CharSequence> value) {
      validate(fields()[9], value);
      this.artist_name = value;
      fieldSetFlags()[9] = true;
      return this;
    }

    /**
      * Checks whether the 'artist_name' field has been set.
      * @return True if the 'artist_name' field has been set, false otherwise.
      */
    public boolean hasArtistName() {
      return fieldSetFlags()[9];
    }


    /**
      * Clears the value of the 'artist_name' field.
      * @return This builder.
      */
    public song.avro.metadata_songs.Builder clearArtistName() {
      artist_name = null;
      fieldSetFlags()[9] = false;
      return this;
    }

    /**
      * Gets the value of the 'artist_playmeid' field.
      * @return The value.
      */
    public java.util.List<java.lang.Integer> getArtistPlaymeid() {
      return artist_playmeid;
    }


    /**
      * Sets the value of the 'artist_playmeid' field.
      * @param value The value of 'artist_playmeid'.
      * @return This builder.
      */
    public song.avro.metadata_songs.Builder setArtistPlaymeid(java.util.List<java.lang.Integer> value) {
      validate(fields()[10], value);
      this.artist_playmeid = value;
      fieldSetFlags()[10] = true;
      return this;
    }

    /**
      * Checks whether the 'artist_playmeid' field has been set.
      * @return True if the 'artist_playmeid' field has been set, false otherwise.
      */
    public boolean hasArtistPlaymeid() {
      return fieldSetFlags()[10];
    }


    /**
      * Clears the value of the 'artist_playmeid' field.
      * @return This builder.
      */
    public song.avro.metadata_songs.Builder clearArtistPlaymeid() {
      artist_playmeid = null;
      fieldSetFlags()[10] = false;
      return this;
    }

    /**
      * Gets the value of the 'genre' field.
      * @return The value.
      */
    public java.util.List<java.lang.CharSequence> getGenre() {
      return genre;
    }


    /**
      * Sets the value of the 'genre' field.
      * @param value The value of 'genre'.
      * @return This builder.
      */
    public song.avro.metadata_songs.Builder setGenre(java.util.List<java.lang.CharSequence> value) {
      validate(fields()[11], value);
      this.genre = value;
      fieldSetFlags()[11] = true;
      return this;
    }

    /**
      * Checks whether the 'genre' field has been set.
      * @return True if the 'genre' field has been set, false otherwise.
      */
    public boolean hasGenre() {
      return fieldSetFlags()[11];
    }


    /**
      * Clears the value of the 'genre' field.
      * @return This builder.
      */
    public song.avro.metadata_songs.Builder clearGenre() {
      genre = null;
      fieldSetFlags()[11] = false;
      return this;
    }

    /**
      * Gets the value of the 'idx_artist_terms' field.
      * @return The value.
      */
    public java.util.List<java.lang.Integer> getIdxArtistTerms() {
      return idx_artist_terms;
    }


    /**
      * Sets the value of the 'idx_artist_terms' field.
      * @param value The value of 'idx_artist_terms'.
      * @return This builder.
      */
    public song.avro.metadata_songs.Builder setIdxArtistTerms(java.util.List<java.lang.Integer> value) {
      validate(fields()[12], value);
      this.idx_artist_terms = value;
      fieldSetFlags()[12] = true;
      return this;
    }

    /**
      * Checks whether the 'idx_artist_terms' field has been set.
      * @return True if the 'idx_artist_terms' field has been set, false otherwise.
      */
    public boolean hasIdxArtistTerms() {
      return fieldSetFlags()[12];
    }


    /**
      * Clears the value of the 'idx_artist_terms' field.
      * @return This builder.
      */
    public song.avro.metadata_songs.Builder clearIdxArtistTerms() {
      idx_artist_terms = null;
      fieldSetFlags()[12] = false;
      return this;
    }

    /**
      * Gets the value of the 'idx_similar_artists' field.
      * @return The value.
      */
    public java.util.List<java.lang.Integer> getIdxSimilarArtists() {
      return idx_similar_artists;
    }


    /**
      * Sets the value of the 'idx_similar_artists' field.
      * @param value The value of 'idx_similar_artists'.
      * @return This builder.
      */
    public song.avro.metadata_songs.Builder setIdxSimilarArtists(java.util.List<java.lang.Integer> value) {
      validate(fields()[13], value);
      this.idx_similar_artists = value;
      fieldSetFlags()[13] = true;
      return this;
    }

    /**
      * Checks whether the 'idx_similar_artists' field has been set.
      * @return True if the 'idx_similar_artists' field has been set, false otherwise.
      */
    public boolean hasIdxSimilarArtists() {
      return fieldSetFlags()[13];
    }


    /**
      * Clears the value of the 'idx_similar_artists' field.
      * @return This builder.
      */
    public song.avro.metadata_songs.Builder clearIdxSimilarArtists() {
      idx_similar_artists = null;
      fieldSetFlags()[13] = false;
      return this;
    }

    /**
      * Gets the value of the 'release' field.
      * @return The value.
      */
    public java.util.List<java.lang.CharSequence> getRelease() {
      return release;
    }


    /**
      * Sets the value of the 'release' field.
      * @param value The value of 'release'.
      * @return This builder.
      */
    public song.avro.metadata_songs.Builder setRelease(java.util.List<java.lang.CharSequence> value) {
      validate(fields()[14], value);
      this.release = value;
      fieldSetFlags()[14] = true;
      return this;
    }

    /**
      * Checks whether the 'release' field has been set.
      * @return True if the 'release' field has been set, false otherwise.
      */
    public boolean hasRelease() {
      return fieldSetFlags()[14];
    }


    /**
      * Clears the value of the 'release' field.
      * @return This builder.
      */
    public song.avro.metadata_songs.Builder clearRelease() {
      release = null;
      fieldSetFlags()[14] = false;
      return this;
    }

    /**
      * Gets the value of the 'release_7digitalid' field.
      * @return The value.
      */
    public java.util.List<java.lang.Integer> getRelease7digitalid() {
      return release_7digitalid;
    }


    /**
      * Sets the value of the 'release_7digitalid' field.
      * @param value The value of 'release_7digitalid'.
      * @return This builder.
      */
    public song.avro.metadata_songs.Builder setRelease7digitalid(java.util.List<java.lang.Integer> value) {
      validate(fields()[15], value);
      this.release_7digitalid = value;
      fieldSetFlags()[15] = true;
      return this;
    }

    /**
      * Checks whether the 'release_7digitalid' field has been set.
      * @return True if the 'release_7digitalid' field has been set, false otherwise.
      */
    public boolean hasRelease7digitalid() {
      return fieldSetFlags()[15];
    }


    /**
      * Clears the value of the 'release_7digitalid' field.
      * @return This builder.
      */
    public song.avro.metadata_songs.Builder clearRelease7digitalid() {
      release_7digitalid = null;
      fieldSetFlags()[15] = false;
      return this;
    }

    /**
      * Gets the value of the 'song_hotttnesss' field.
      * @return The value.
      */
    public java.util.List<java.lang.Double> getSongHotttnesss() {
      return song_hotttnesss;
    }


    /**
      * Sets the value of the 'song_hotttnesss' field.
      * @param value The value of 'song_hotttnesss'.
      * @return This builder.
      */
    public song.avro.metadata_songs.Builder setSongHotttnesss(java.util.List<java.lang.Double> value) {
      validate(fields()[16], value);
      this.song_hotttnesss = value;
      fieldSetFlags()[16] = true;
      return this;
    }

    /**
      * Checks whether the 'song_hotttnesss' field has been set.
      * @return True if the 'song_hotttnesss' field has been set, false otherwise.
      */
    public boolean hasSongHotttnesss() {
      return fieldSetFlags()[16];
    }


    /**
      * Clears the value of the 'song_hotttnesss' field.
      * @return This builder.
      */
    public song.avro.metadata_songs.Builder clearSongHotttnesss() {
      song_hotttnesss = null;
      fieldSetFlags()[16] = false;
      return this;
    }

    /**
      * Gets the value of the 'song_id' field.
      * @return The value.
      */
    public java.util.List<java.lang.CharSequence> getSongId() {
      return song_id;
    }


    /**
      * Sets the value of the 'song_id' field.
      * @param value The value of 'song_id'.
      * @return This builder.
      */
    public song.avro.metadata_songs.Builder setSongId(java.util.List<java.lang.CharSequence> value) {
      validate(fields()[17], value);
      this.song_id = value;
      fieldSetFlags()[17] = true;
      return this;
    }

    /**
      * Checks whether the 'song_id' field has been set.
      * @return True if the 'song_id' field has been set, false otherwise.
      */
    public boolean hasSongId() {
      return fieldSetFlags()[17];
    }


    /**
      * Clears the value of the 'song_id' field.
      * @return This builder.
      */
    public song.avro.metadata_songs.Builder clearSongId() {
      song_id = null;
      fieldSetFlags()[17] = false;
      return this;
    }

    /**
      * Gets the value of the 'title' field.
      * @return The value.
      */
    public java.util.List<java.lang.CharSequence> getTitle() {
      return title;
    }


    /**
      * Sets the value of the 'title' field.
      * @param value The value of 'title'.
      * @return This builder.
      */
    public song.avro.metadata_songs.Builder setTitle(java.util.List<java.lang.CharSequence> value) {
      validate(fields()[18], value);
      this.title = value;
      fieldSetFlags()[18] = true;
      return this;
    }

    /**
      * Checks whether the 'title' field has been set.
      * @return True if the 'title' field has been set, false otherwise.
      */
    public boolean hasTitle() {
      return fieldSetFlags()[18];
    }


    /**
      * Clears the value of the 'title' field.
      * @return This builder.
      */
    public song.avro.metadata_songs.Builder clearTitle() {
      title = null;
      fieldSetFlags()[18] = false;
      return this;
    }

    /**
      * Gets the value of the 'track_7digitalid' field.
      * @return The value.
      */
    public java.util.List<java.lang.Integer> getTrack7digitalid() {
      return track_7digitalid;
    }


    /**
      * Sets the value of the 'track_7digitalid' field.
      * @param value The value of 'track_7digitalid'.
      * @return This builder.
      */
    public song.avro.metadata_songs.Builder setTrack7digitalid(java.util.List<java.lang.Integer> value) {
      validate(fields()[19], value);
      this.track_7digitalid = value;
      fieldSetFlags()[19] = true;
      return this;
    }

    /**
      * Checks whether the 'track_7digitalid' field has been set.
      * @return True if the 'track_7digitalid' field has been set, false otherwise.
      */
    public boolean hasTrack7digitalid() {
      return fieldSetFlags()[19];
    }


    /**
      * Clears the value of the 'track_7digitalid' field.
      * @return This builder.
      */
    public song.avro.metadata_songs.Builder clearTrack7digitalid() {
      track_7digitalid = null;
      fieldSetFlags()[19] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public metadata_songs build() {
      try {
        metadata_songs record = new metadata_songs();
        record.analyzer_version = fieldSetFlags()[0] ? this.analyzer_version : (java.util.List<java.lang.CharSequence>) defaultValue(fields()[0]);
        record.artist_7digitalid = fieldSetFlags()[1] ? this.artist_7digitalid : (java.util.List<java.lang.Integer>) defaultValue(fields()[1]);
        record.artist_familiarity = fieldSetFlags()[2] ? this.artist_familiarity : (java.util.List<java.lang.Double>) defaultValue(fields()[2]);
        record.artist_hotttnesss = fieldSetFlags()[3] ? this.artist_hotttnesss : (java.util.List<java.lang.Double>) defaultValue(fields()[3]);
        record.artist_id = fieldSetFlags()[4] ? this.artist_id : (java.util.List<java.lang.CharSequence>) defaultValue(fields()[4]);
        record.artist_latitude = fieldSetFlags()[5] ? this.artist_latitude : (java.util.List<java.lang.Double>) defaultValue(fields()[5]);
        record.artist_location = fieldSetFlags()[6] ? this.artist_location : (java.util.List<java.lang.CharSequence>) defaultValue(fields()[6]);
        record.artist_longitude = fieldSetFlags()[7] ? this.artist_longitude : (java.util.List<java.lang.Double>) defaultValue(fields()[7]);
        record.artist_mbid = fieldSetFlags()[8] ? this.artist_mbid : (java.util.List<java.lang.CharSequence>) defaultValue(fields()[8]);
        record.artist_name = fieldSetFlags()[9] ? this.artist_name : (java.util.List<java.lang.CharSequence>) defaultValue(fields()[9]);
        record.artist_playmeid = fieldSetFlags()[10] ? this.artist_playmeid : (java.util.List<java.lang.Integer>) defaultValue(fields()[10]);
        record.genre = fieldSetFlags()[11] ? this.genre : (java.util.List<java.lang.CharSequence>) defaultValue(fields()[11]);
        record.idx_artist_terms = fieldSetFlags()[12] ? this.idx_artist_terms : (java.util.List<java.lang.Integer>) defaultValue(fields()[12]);
        record.idx_similar_artists = fieldSetFlags()[13] ? this.idx_similar_artists : (java.util.List<java.lang.Integer>) defaultValue(fields()[13]);
        record.release = fieldSetFlags()[14] ? this.release : (java.util.List<java.lang.CharSequence>) defaultValue(fields()[14]);
        record.release_7digitalid = fieldSetFlags()[15] ? this.release_7digitalid : (java.util.List<java.lang.Integer>) defaultValue(fields()[15]);
        record.song_hotttnesss = fieldSetFlags()[16] ? this.song_hotttnesss : (java.util.List<java.lang.Double>) defaultValue(fields()[16]);
        record.song_id = fieldSetFlags()[17] ? this.song_id : (java.util.List<java.lang.CharSequence>) defaultValue(fields()[17]);
        record.title = fieldSetFlags()[18] ? this.title : (java.util.List<java.lang.CharSequence>) defaultValue(fields()[18]);
        record.track_7digitalid = fieldSetFlags()[19] ? this.track_7digitalid : (java.util.List<java.lang.Integer>) defaultValue(fields()[19]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<metadata_songs>
    WRITER$ = (org.apache.avro.io.DatumWriter<metadata_songs>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<metadata_songs>
    READER$ = (org.apache.avro.io.DatumReader<metadata_songs>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override protected boolean hasCustomCoders() { return true; }

  @Override public void customEncode(org.apache.avro.io.Encoder out)
    throws java.io.IOException
  {
    long size0 = this.analyzer_version.size();
    out.writeArrayStart();
    out.setItemCount(size0);
    long actualSize0 = 0;
    for (java.lang.CharSequence e0: this.analyzer_version) {
      actualSize0++;
      out.startItem();
      out.writeString(e0);
    }
    out.writeArrayEnd();
    if (actualSize0 != size0)
      throw new java.util.ConcurrentModificationException("Array-size written was " + size0 + ", but element count was " + actualSize0 + ".");

    long size1 = this.artist_7digitalid.size();
    out.writeArrayStart();
    out.setItemCount(size1);
    long actualSize1 = 0;
    for (java.lang.Integer e1: this.artist_7digitalid) {
      actualSize1++;
      out.startItem();
      out.writeInt(e1);
    }
    out.writeArrayEnd();
    if (actualSize1 != size1)
      throw new java.util.ConcurrentModificationException("Array-size written was " + size1 + ", but element count was " + actualSize1 + ".");

    long size2 = this.artist_familiarity.size();
    out.writeArrayStart();
    out.setItemCount(size2);
    long actualSize2 = 0;
    for (java.lang.Double e2: this.artist_familiarity) {
      actualSize2++;
      out.startItem();
      out.writeDouble(e2);
    }
    out.writeArrayEnd();
    if (actualSize2 != size2)
      throw new java.util.ConcurrentModificationException("Array-size written was " + size2 + ", but element count was " + actualSize2 + ".");

    long size3 = this.artist_hotttnesss.size();
    out.writeArrayStart();
    out.setItemCount(size3);
    long actualSize3 = 0;
    for (java.lang.Double e3: this.artist_hotttnesss) {
      actualSize3++;
      out.startItem();
      out.writeDouble(e3);
    }
    out.writeArrayEnd();
    if (actualSize3 != size3)
      throw new java.util.ConcurrentModificationException("Array-size written was " + size3 + ", but element count was " + actualSize3 + ".");

    long size4 = this.artist_id.size();
    out.writeArrayStart();
    out.setItemCount(size4);
    long actualSize4 = 0;
    for (java.lang.CharSequence e4: this.artist_id) {
      actualSize4++;
      out.startItem();
      out.writeString(e4);
    }
    out.writeArrayEnd();
    if (actualSize4 != size4)
      throw new java.util.ConcurrentModificationException("Array-size written was " + size4 + ", but element count was " + actualSize4 + ".");

    long size5 = this.artist_latitude.size();
    out.writeArrayStart();
    out.setItemCount(size5);
    long actualSize5 = 0;
    for (java.lang.Double e5: this.artist_latitude) {
      actualSize5++;
      out.startItem();
      out.writeDouble(e5);
    }
    out.writeArrayEnd();
    if (actualSize5 != size5)
      throw new java.util.ConcurrentModificationException("Array-size written was " + size5 + ", but element count was " + actualSize5 + ".");

    long size6 = this.artist_location.size();
    out.writeArrayStart();
    out.setItemCount(size6);
    long actualSize6 = 0;
    for (java.lang.CharSequence e6: this.artist_location) {
      actualSize6++;
      out.startItem();
      out.writeString(e6);
    }
    out.writeArrayEnd();
    if (actualSize6 != size6)
      throw new java.util.ConcurrentModificationException("Array-size written was " + size6 + ", but element count was " + actualSize6 + ".");

    long size7 = this.artist_longitude.size();
    out.writeArrayStart();
    out.setItemCount(size7);
    long actualSize7 = 0;
    for (java.lang.Double e7: this.artist_longitude) {
      actualSize7++;
      out.startItem();
      out.writeDouble(e7);
    }
    out.writeArrayEnd();
    if (actualSize7 != size7)
      throw new java.util.ConcurrentModificationException("Array-size written was " + size7 + ", but element count was " + actualSize7 + ".");

    long size8 = this.artist_mbid.size();
    out.writeArrayStart();
    out.setItemCount(size8);
    long actualSize8 = 0;
    for (java.lang.CharSequence e8: this.artist_mbid) {
      actualSize8++;
      out.startItem();
      out.writeString(e8);
    }
    out.writeArrayEnd();
    if (actualSize8 != size8)
      throw new java.util.ConcurrentModificationException("Array-size written was " + size8 + ", but element count was " + actualSize8 + ".");

    long size9 = this.artist_name.size();
    out.writeArrayStart();
    out.setItemCount(size9);
    long actualSize9 = 0;
    for (java.lang.CharSequence e9: this.artist_name) {
      actualSize9++;
      out.startItem();
      out.writeString(e9);
    }
    out.writeArrayEnd();
    if (actualSize9 != size9)
      throw new java.util.ConcurrentModificationException("Array-size written was " + size9 + ", but element count was " + actualSize9 + ".");

    if (this.artist_playmeid == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      long size10 = this.artist_playmeid.size();
      out.writeArrayStart();
      out.setItemCount(size10);
      long actualSize10 = 0;
      for (java.lang.Integer e10: this.artist_playmeid) {
        actualSize10++;
        out.startItem();
        out.writeInt(e10);
      }
      out.writeArrayEnd();
      if (actualSize10 != size10)
        throw new java.util.ConcurrentModificationException("Array-size written was " + size10 + ", but element count was " + actualSize10 + ".");
    }

    long size11 = this.genre.size();
    out.writeArrayStart();
    out.setItemCount(size11);
    long actualSize11 = 0;
    for (java.lang.CharSequence e11: this.genre) {
      actualSize11++;
      out.startItem();
      out.writeString(e11);
    }
    out.writeArrayEnd();
    if (actualSize11 != size11)
      throw new java.util.ConcurrentModificationException("Array-size written was " + size11 + ", but element count was " + actualSize11 + ".");

    if (this.idx_artist_terms == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      long size12 = this.idx_artist_terms.size();
      out.writeArrayStart();
      out.setItemCount(size12);
      long actualSize12 = 0;
      for (java.lang.Integer e12: this.idx_artist_terms) {
        actualSize12++;
        out.startItem();
        out.writeInt(e12);
      }
      out.writeArrayEnd();
      if (actualSize12 != size12)
        throw new java.util.ConcurrentModificationException("Array-size written was " + size12 + ", but element count was " + actualSize12 + ".");
    }

    if (this.idx_similar_artists == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      long size13 = this.idx_similar_artists.size();
      out.writeArrayStart();
      out.setItemCount(size13);
      long actualSize13 = 0;
      for (java.lang.Integer e13: this.idx_similar_artists) {
        actualSize13++;
        out.startItem();
        out.writeInt(e13);
      }
      out.writeArrayEnd();
      if (actualSize13 != size13)
        throw new java.util.ConcurrentModificationException("Array-size written was " + size13 + ", but element count was " + actualSize13 + ".");
    }

    long size14 = this.release.size();
    out.writeArrayStart();
    out.setItemCount(size14);
    long actualSize14 = 0;
    for (java.lang.CharSequence e14: this.release) {
      actualSize14++;
      out.startItem();
      out.writeString(e14);
    }
    out.writeArrayEnd();
    if (actualSize14 != size14)
      throw new java.util.ConcurrentModificationException("Array-size written was " + size14 + ", but element count was " + actualSize14 + ".");

    if (this.release_7digitalid == null) {
      out.writeIndex(1);
      out.writeNull();
    } else {
      out.writeIndex(0);
      long size15 = this.release_7digitalid.size();
      out.writeArrayStart();
      out.setItemCount(size15);
      long actualSize15 = 0;
      for (java.lang.Integer e15: this.release_7digitalid) {
        actualSize15++;
        out.startItem();
        out.writeInt(e15);
      }
      out.writeArrayEnd();
      if (actualSize15 != size15)
        throw new java.util.ConcurrentModificationException("Array-size written was " + size15 + ", but element count was " + actualSize15 + ".");
    }

    long size16 = this.song_hotttnesss.size();
    out.writeArrayStart();
    out.setItemCount(size16);
    long actualSize16 = 0;
    for (java.lang.Double e16: this.song_hotttnesss) {
      actualSize16++;
      out.startItem();
      out.writeDouble(e16);
    }
    out.writeArrayEnd();
    if (actualSize16 != size16)
      throw new java.util.ConcurrentModificationException("Array-size written was " + size16 + ", but element count was " + actualSize16 + ".");

    long size17 = this.song_id.size();
    out.writeArrayStart();
    out.setItemCount(size17);
    long actualSize17 = 0;
    for (java.lang.CharSequence e17: this.song_id) {
      actualSize17++;
      out.startItem();
      out.writeString(e17);
    }
    out.writeArrayEnd();
    if (actualSize17 != size17)
      throw new java.util.ConcurrentModificationException("Array-size written was " + size17 + ", but element count was " + actualSize17 + ".");

    long size18 = this.title.size();
    out.writeArrayStart();
    out.setItemCount(size18);
    long actualSize18 = 0;
    for (java.lang.CharSequence e18: this.title) {
      actualSize18++;
      out.startItem();
      out.writeString(e18);
    }
    out.writeArrayEnd();
    if (actualSize18 != size18)
      throw new java.util.ConcurrentModificationException("Array-size written was " + size18 + ", but element count was " + actualSize18 + ".");

    if (this.track_7digitalid == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      long size19 = this.track_7digitalid.size();
      out.writeArrayStart();
      out.setItemCount(size19);
      long actualSize19 = 0;
      for (java.lang.Integer e19: this.track_7digitalid) {
        actualSize19++;
        out.startItem();
        out.writeInt(e19);
      }
      out.writeArrayEnd();
      if (actualSize19 != size19)
        throw new java.util.ConcurrentModificationException("Array-size written was " + size19 + ", but element count was " + actualSize19 + ".");
    }

  }

  @Override public void customDecode(org.apache.avro.io.ResolvingDecoder in)
    throws java.io.IOException
  {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      long size0 = in.readArrayStart();
      java.util.List<java.lang.CharSequence> a0 = this.analyzer_version;
      if (a0 == null) {
        a0 = new SpecificData.Array<java.lang.CharSequence>((int)size0, SCHEMA$.getField("analyzer_version").schema());
        this.analyzer_version = a0;
      } else a0.clear();
      SpecificData.Array<java.lang.CharSequence> ga0 = (a0 instanceof SpecificData.Array ? (SpecificData.Array<java.lang.CharSequence>)a0 : null);
      for ( ; 0 < size0; size0 = in.arrayNext()) {
        for ( ; size0 != 0; size0--) {
          java.lang.CharSequence e0 = (ga0 != null ? ga0.peek() : null);
          e0 = in.readString(e0 instanceof Utf8 ? (Utf8)e0 : null);
          a0.add(e0);
        }
      }

      long size1 = in.readArrayStart();
      java.util.List<java.lang.Integer> a1 = this.artist_7digitalid;
      if (a1 == null) {
        a1 = new SpecificData.Array<java.lang.Integer>((int)size1, SCHEMA$.getField("artist_7digitalid").schema());
        this.artist_7digitalid = a1;
      } else a1.clear();
      SpecificData.Array<java.lang.Integer> ga1 = (a1 instanceof SpecificData.Array ? (SpecificData.Array<java.lang.Integer>)a1 : null);
      for ( ; 0 < size1; size1 = in.arrayNext()) {
        for ( ; size1 != 0; size1--) {
          java.lang.Integer e1 = (ga1 != null ? ga1.peek() : null);
          e1 = in.readInt();
          a1.add(e1);
        }
      }

      long size2 = in.readArrayStart();
      java.util.List<java.lang.Double> a2 = this.artist_familiarity;
      if (a2 == null) {
        a2 = new SpecificData.Array<java.lang.Double>((int)size2, SCHEMA$.getField("artist_familiarity").schema());
        this.artist_familiarity = a2;
      } else a2.clear();
      SpecificData.Array<java.lang.Double> ga2 = (a2 instanceof SpecificData.Array ? (SpecificData.Array<java.lang.Double>)a2 : null);
      for ( ; 0 < size2; size2 = in.arrayNext()) {
        for ( ; size2 != 0; size2--) {
          java.lang.Double e2 = (ga2 != null ? ga2.peek() : null);
          e2 = in.readDouble();
          a2.add(e2);
        }
      }

      long size3 = in.readArrayStart();
      java.util.List<java.lang.Double> a3 = this.artist_hotttnesss;
      if (a3 == null) {
        a3 = new SpecificData.Array<java.lang.Double>((int)size3, SCHEMA$.getField("artist_hotttnesss").schema());
        this.artist_hotttnesss = a3;
      } else a3.clear();
      SpecificData.Array<java.lang.Double> ga3 = (a3 instanceof SpecificData.Array ? (SpecificData.Array<java.lang.Double>)a3 : null);
      for ( ; 0 < size3; size3 = in.arrayNext()) {
        for ( ; size3 != 0; size3--) {
          java.lang.Double e3 = (ga3 != null ? ga3.peek() : null);
          e3 = in.readDouble();
          a3.add(e3);
        }
      }

      long size4 = in.readArrayStart();
      java.util.List<java.lang.CharSequence> a4 = this.artist_id;
      if (a4 == null) {
        a4 = new SpecificData.Array<java.lang.CharSequence>((int)size4, SCHEMA$.getField("artist_id").schema());
        this.artist_id = a4;
      } else a4.clear();
      SpecificData.Array<java.lang.CharSequence> ga4 = (a4 instanceof SpecificData.Array ? (SpecificData.Array<java.lang.CharSequence>)a4 : null);
      for ( ; 0 < size4; size4 = in.arrayNext()) {
        for ( ; size4 != 0; size4--) {
          java.lang.CharSequence e4 = (ga4 != null ? ga4.peek() : null);
          e4 = in.readString(e4 instanceof Utf8 ? (Utf8)e4 : null);
          a4.add(e4);
        }
      }

      long size5 = in.readArrayStart();
      java.util.List<java.lang.Double> a5 = this.artist_latitude;
      if (a5 == null) {
        a5 = new SpecificData.Array<java.lang.Double>((int)size5, SCHEMA$.getField("artist_latitude").schema());
        this.artist_latitude = a5;
      } else a5.clear();
      SpecificData.Array<java.lang.Double> ga5 = (a5 instanceof SpecificData.Array ? (SpecificData.Array<java.lang.Double>)a5 : null);
      for ( ; 0 < size5; size5 = in.arrayNext()) {
        for ( ; size5 != 0; size5--) {
          java.lang.Double e5 = (ga5 != null ? ga5.peek() : null);
          e5 = in.readDouble();
          a5.add(e5);
        }
      }

      long size6 = in.readArrayStart();
      java.util.List<java.lang.CharSequence> a6 = this.artist_location;
      if (a6 == null) {
        a6 = new SpecificData.Array<java.lang.CharSequence>((int)size6, SCHEMA$.getField("artist_location").schema());
        this.artist_location = a6;
      } else a6.clear();
      SpecificData.Array<java.lang.CharSequence> ga6 = (a6 instanceof SpecificData.Array ? (SpecificData.Array<java.lang.CharSequence>)a6 : null);
      for ( ; 0 < size6; size6 = in.arrayNext()) {
        for ( ; size6 != 0; size6--) {
          java.lang.CharSequence e6 = (ga6 != null ? ga6.peek() : null);
          e6 = in.readString(e6 instanceof Utf8 ? (Utf8)e6 : null);
          a6.add(e6);
        }
      }

      long size7 = in.readArrayStart();
      java.util.List<java.lang.Double> a7 = this.artist_longitude;
      if (a7 == null) {
        a7 = new SpecificData.Array<java.lang.Double>((int)size7, SCHEMA$.getField("artist_longitude").schema());
        this.artist_longitude = a7;
      } else a7.clear();
      SpecificData.Array<java.lang.Double> ga7 = (a7 instanceof SpecificData.Array ? (SpecificData.Array<java.lang.Double>)a7 : null);
      for ( ; 0 < size7; size7 = in.arrayNext()) {
        for ( ; size7 != 0; size7--) {
          java.lang.Double e7 = (ga7 != null ? ga7.peek() : null);
          e7 = in.readDouble();
          a7.add(e7);
        }
      }

      long size8 = in.readArrayStart();
      java.util.List<java.lang.CharSequence> a8 = this.artist_mbid;
      if (a8 == null) {
        a8 = new SpecificData.Array<java.lang.CharSequence>((int)size8, SCHEMA$.getField("artist_mbid").schema());
        this.artist_mbid = a8;
      } else a8.clear();
      SpecificData.Array<java.lang.CharSequence> ga8 = (a8 instanceof SpecificData.Array ? (SpecificData.Array<java.lang.CharSequence>)a8 : null);
      for ( ; 0 < size8; size8 = in.arrayNext()) {
        for ( ; size8 != 0; size8--) {
          java.lang.CharSequence e8 = (ga8 != null ? ga8.peek() : null);
          e8 = in.readString(e8 instanceof Utf8 ? (Utf8)e8 : null);
          a8.add(e8);
        }
      }

      long size9 = in.readArrayStart();
      java.util.List<java.lang.CharSequence> a9 = this.artist_name;
      if (a9 == null) {
        a9 = new SpecificData.Array<java.lang.CharSequence>((int)size9, SCHEMA$.getField("artist_name").schema());
        this.artist_name = a9;
      } else a9.clear();
      SpecificData.Array<java.lang.CharSequence> ga9 = (a9 instanceof SpecificData.Array ? (SpecificData.Array<java.lang.CharSequence>)a9 : null);
      for ( ; 0 < size9; size9 = in.arrayNext()) {
        for ( ; size9 != 0; size9--) {
          java.lang.CharSequence e9 = (ga9 != null ? ga9.peek() : null);
          e9 = in.readString(e9 instanceof Utf8 ? (Utf8)e9 : null);
          a9.add(e9);
        }
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.artist_playmeid = null;
      } else {
        long size10 = in.readArrayStart();
        java.util.List<java.lang.Integer> a10 = this.artist_playmeid;
        if (a10 == null) {
          a10 = new SpecificData.Array<java.lang.Integer>((int)size10, SCHEMA$.getField("artist_playmeid").schema().getTypes().get(1));
          this.artist_playmeid = a10;
        } else a10.clear();
        SpecificData.Array<java.lang.Integer> ga10 = (a10 instanceof SpecificData.Array ? (SpecificData.Array<java.lang.Integer>)a10 : null);
        for ( ; 0 < size10; size10 = in.arrayNext()) {
          for ( ; size10 != 0; size10--) {
            java.lang.Integer e10 = (ga10 != null ? ga10.peek() : null);
            e10 = in.readInt();
            a10.add(e10);
          }
        }
      }

      long size11 = in.readArrayStart();
      java.util.List<java.lang.CharSequence> a11 = this.genre;
      if (a11 == null) {
        a11 = new SpecificData.Array<java.lang.CharSequence>((int)size11, SCHEMA$.getField("genre").schema());
        this.genre = a11;
      } else a11.clear();
      SpecificData.Array<java.lang.CharSequence> ga11 = (a11 instanceof SpecificData.Array ? (SpecificData.Array<java.lang.CharSequence>)a11 : null);
      for ( ; 0 < size11; size11 = in.arrayNext()) {
        for ( ; size11 != 0; size11--) {
          java.lang.CharSequence e11 = (ga11 != null ? ga11.peek() : null);
          e11 = in.readString(e11 instanceof Utf8 ? (Utf8)e11 : null);
          a11.add(e11);
        }
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.idx_artist_terms = null;
      } else {
        long size12 = in.readArrayStart();
        java.util.List<java.lang.Integer> a12 = this.idx_artist_terms;
        if (a12 == null) {
          a12 = new SpecificData.Array<java.lang.Integer>((int)size12, SCHEMA$.getField("idx_artist_terms").schema().getTypes().get(1));
          this.idx_artist_terms = a12;
        } else a12.clear();
        SpecificData.Array<java.lang.Integer> ga12 = (a12 instanceof SpecificData.Array ? (SpecificData.Array<java.lang.Integer>)a12 : null);
        for ( ; 0 < size12; size12 = in.arrayNext()) {
          for ( ; size12 != 0; size12--) {
            java.lang.Integer e12 = (ga12 != null ? ga12.peek() : null);
            e12 = in.readInt();
            a12.add(e12);
          }
        }
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.idx_similar_artists = null;
      } else {
        long size13 = in.readArrayStart();
        java.util.List<java.lang.Integer> a13 = this.idx_similar_artists;
        if (a13 == null) {
          a13 = new SpecificData.Array<java.lang.Integer>((int)size13, SCHEMA$.getField("idx_similar_artists").schema().getTypes().get(1));
          this.idx_similar_artists = a13;
        } else a13.clear();
        SpecificData.Array<java.lang.Integer> ga13 = (a13 instanceof SpecificData.Array ? (SpecificData.Array<java.lang.Integer>)a13 : null);
        for ( ; 0 < size13; size13 = in.arrayNext()) {
          for ( ; size13 != 0; size13--) {
            java.lang.Integer e13 = (ga13 != null ? ga13.peek() : null);
            e13 = in.readInt();
            a13.add(e13);
          }
        }
      }

      long size14 = in.readArrayStart();
      java.util.List<java.lang.CharSequence> a14 = this.release;
      if (a14 == null) {
        a14 = new SpecificData.Array<java.lang.CharSequence>((int)size14, SCHEMA$.getField("release").schema());
        this.release = a14;
      } else a14.clear();
      SpecificData.Array<java.lang.CharSequence> ga14 = (a14 instanceof SpecificData.Array ? (SpecificData.Array<java.lang.CharSequence>)a14 : null);
      for ( ; 0 < size14; size14 = in.arrayNext()) {
        for ( ; size14 != 0; size14--) {
          java.lang.CharSequence e14 = (ga14 != null ? ga14.peek() : null);
          e14 = in.readString(e14 instanceof Utf8 ? (Utf8)e14 : null);
          a14.add(e14);
        }
      }

      if (in.readIndex() != 0) {
        in.readNull();
        this.release_7digitalid = null;
      } else {
        long size15 = in.readArrayStart();
        java.util.List<java.lang.Integer> a15 = this.release_7digitalid;
        if (a15 == null) {
          a15 = new SpecificData.Array<java.lang.Integer>((int)size15, SCHEMA$.getField("release_7digitalid").schema().getTypes().get(0));
          this.release_7digitalid = a15;
        } else a15.clear();
        SpecificData.Array<java.lang.Integer> ga15 = (a15 instanceof SpecificData.Array ? (SpecificData.Array<java.lang.Integer>)a15 : null);
        for ( ; 0 < size15; size15 = in.arrayNext()) {
          for ( ; size15 != 0; size15--) {
            java.lang.Integer e15 = (ga15 != null ? ga15.peek() : null);
            e15 = in.readInt();
            a15.add(e15);
          }
        }
      }

      long size16 = in.readArrayStart();
      java.util.List<java.lang.Double> a16 = this.song_hotttnesss;
      if (a16 == null) {
        a16 = new SpecificData.Array<java.lang.Double>((int)size16, SCHEMA$.getField("song_hotttnesss").schema());
        this.song_hotttnesss = a16;
      } else a16.clear();
      SpecificData.Array<java.lang.Double> ga16 = (a16 instanceof SpecificData.Array ? (SpecificData.Array<java.lang.Double>)a16 : null);
      for ( ; 0 < size16; size16 = in.arrayNext()) {
        for ( ; size16 != 0; size16--) {
          java.lang.Double e16 = (ga16 != null ? ga16.peek() : null);
          e16 = in.readDouble();
          a16.add(e16);
        }
      }

      long size17 = in.readArrayStart();
      java.util.List<java.lang.CharSequence> a17 = this.song_id;
      if (a17 == null) {
        a17 = new SpecificData.Array<java.lang.CharSequence>((int)size17, SCHEMA$.getField("song_id").schema());
        this.song_id = a17;
      } else a17.clear();
      SpecificData.Array<java.lang.CharSequence> ga17 = (a17 instanceof SpecificData.Array ? (SpecificData.Array<java.lang.CharSequence>)a17 : null);
      for ( ; 0 < size17; size17 = in.arrayNext()) {
        for ( ; size17 != 0; size17--) {
          java.lang.CharSequence e17 = (ga17 != null ? ga17.peek() : null);
          e17 = in.readString(e17 instanceof Utf8 ? (Utf8)e17 : null);
          a17.add(e17);
        }
      }

      long size18 = in.readArrayStart();
      java.util.List<java.lang.CharSequence> a18 = this.title;
      if (a18 == null) {
        a18 = new SpecificData.Array<java.lang.CharSequence>((int)size18, SCHEMA$.getField("title").schema());
        this.title = a18;
      } else a18.clear();
      SpecificData.Array<java.lang.CharSequence> ga18 = (a18 instanceof SpecificData.Array ? (SpecificData.Array<java.lang.CharSequence>)a18 : null);
      for ( ; 0 < size18; size18 = in.arrayNext()) {
        for ( ; size18 != 0; size18--) {
          java.lang.CharSequence e18 = (ga18 != null ? ga18.peek() : null);
          e18 = in.readString(e18 instanceof Utf8 ? (Utf8)e18 : null);
          a18.add(e18);
        }
      }

      if (in.readIndex() != 1) {
        in.readNull();
        this.track_7digitalid = null;
      } else {
        long size19 = in.readArrayStart();
        java.util.List<java.lang.Integer> a19 = this.track_7digitalid;
        if (a19 == null) {
          a19 = new SpecificData.Array<java.lang.Integer>((int)size19, SCHEMA$.getField("track_7digitalid").schema().getTypes().get(1));
          this.track_7digitalid = a19;
        } else a19.clear();
        SpecificData.Array<java.lang.Integer> ga19 = (a19 instanceof SpecificData.Array ? (SpecificData.Array<java.lang.Integer>)a19 : null);
        for ( ; 0 < size19; size19 = in.arrayNext()) {
          for ( ; size19 != 0; size19--) {
            java.lang.Integer e19 = (ga19 != null ? ga19.peek() : null);
            e19 = in.readInt();
            a19.add(e19);
          }
        }
      }

    } else {
      for (int i = 0; i < 20; i++) {
        switch (fieldOrder[i].pos()) {
        case 0:
          long size0 = in.readArrayStart();
          java.util.List<java.lang.CharSequence> a0 = this.analyzer_version;
          if (a0 == null) {
            a0 = new SpecificData.Array<java.lang.CharSequence>((int)size0, SCHEMA$.getField("analyzer_version").schema());
            this.analyzer_version = a0;
          } else a0.clear();
          SpecificData.Array<java.lang.CharSequence> ga0 = (a0 instanceof SpecificData.Array ? (SpecificData.Array<java.lang.CharSequence>)a0 : null);
          for ( ; 0 < size0; size0 = in.arrayNext()) {
            for ( ; size0 != 0; size0--) {
              java.lang.CharSequence e0 = (ga0 != null ? ga0.peek() : null);
              e0 = in.readString(e0 instanceof Utf8 ? (Utf8)e0 : null);
              a0.add(e0);
            }
          }
          break;

        case 1:
          long size1 = in.readArrayStart();
          java.util.List<java.lang.Integer> a1 = this.artist_7digitalid;
          if (a1 == null) {
            a1 = new SpecificData.Array<java.lang.Integer>((int)size1, SCHEMA$.getField("artist_7digitalid").schema());
            this.artist_7digitalid = a1;
          } else a1.clear();
          SpecificData.Array<java.lang.Integer> ga1 = (a1 instanceof SpecificData.Array ? (SpecificData.Array<java.lang.Integer>)a1 : null);
          for ( ; 0 < size1; size1 = in.arrayNext()) {
            for ( ; size1 != 0; size1--) {
              java.lang.Integer e1 = (ga1 != null ? ga1.peek() : null);
              e1 = in.readInt();
              a1.add(e1);
            }
          }
          break;

        case 2:
          long size2 = in.readArrayStart();
          java.util.List<java.lang.Double> a2 = this.artist_familiarity;
          if (a2 == null) {
            a2 = new SpecificData.Array<java.lang.Double>((int)size2, SCHEMA$.getField("artist_familiarity").schema());
            this.artist_familiarity = a2;
          } else a2.clear();
          SpecificData.Array<java.lang.Double> ga2 = (a2 instanceof SpecificData.Array ? (SpecificData.Array<java.lang.Double>)a2 : null);
          for ( ; 0 < size2; size2 = in.arrayNext()) {
            for ( ; size2 != 0; size2--) {
              java.lang.Double e2 = (ga2 != null ? ga2.peek() : null);
              e2 = in.readDouble();
              a2.add(e2);
            }
          }
          break;

        case 3:
          long size3 = in.readArrayStart();
          java.util.List<java.lang.Double> a3 = this.artist_hotttnesss;
          if (a3 == null) {
            a3 = new SpecificData.Array<java.lang.Double>((int)size3, SCHEMA$.getField("artist_hotttnesss").schema());
            this.artist_hotttnesss = a3;
          } else a3.clear();
          SpecificData.Array<java.lang.Double> ga3 = (a3 instanceof SpecificData.Array ? (SpecificData.Array<java.lang.Double>)a3 : null);
          for ( ; 0 < size3; size3 = in.arrayNext()) {
            for ( ; size3 != 0; size3--) {
              java.lang.Double e3 = (ga3 != null ? ga3.peek() : null);
              e3 = in.readDouble();
              a3.add(e3);
            }
          }
          break;

        case 4:
          long size4 = in.readArrayStart();
          java.util.List<java.lang.CharSequence> a4 = this.artist_id;
          if (a4 == null) {
            a4 = new SpecificData.Array<java.lang.CharSequence>((int)size4, SCHEMA$.getField("artist_id").schema());
            this.artist_id = a4;
          } else a4.clear();
          SpecificData.Array<java.lang.CharSequence> ga4 = (a4 instanceof SpecificData.Array ? (SpecificData.Array<java.lang.CharSequence>)a4 : null);
          for ( ; 0 < size4; size4 = in.arrayNext()) {
            for ( ; size4 != 0; size4--) {
              java.lang.CharSequence e4 = (ga4 != null ? ga4.peek() : null);
              e4 = in.readString(e4 instanceof Utf8 ? (Utf8)e4 : null);
              a4.add(e4);
            }
          }
          break;

        case 5:
          long size5 = in.readArrayStart();
          java.util.List<java.lang.Double> a5 = this.artist_latitude;
          if (a5 == null) {
            a5 = new SpecificData.Array<java.lang.Double>((int)size5, SCHEMA$.getField("artist_latitude").schema());
            this.artist_latitude = a5;
          } else a5.clear();
          SpecificData.Array<java.lang.Double> ga5 = (a5 instanceof SpecificData.Array ? (SpecificData.Array<java.lang.Double>)a5 : null);
          for ( ; 0 < size5; size5 = in.arrayNext()) {
            for ( ; size5 != 0; size5--) {
              java.lang.Double e5 = (ga5 != null ? ga5.peek() : null);
              e5 = in.readDouble();
              a5.add(e5);
            }
          }
          break;

        case 6:
          long size6 = in.readArrayStart();
          java.util.List<java.lang.CharSequence> a6 = this.artist_location;
          if (a6 == null) {
            a6 = new SpecificData.Array<java.lang.CharSequence>((int)size6, SCHEMA$.getField("artist_location").schema());
            this.artist_location = a6;
          } else a6.clear();
          SpecificData.Array<java.lang.CharSequence> ga6 = (a6 instanceof SpecificData.Array ? (SpecificData.Array<java.lang.CharSequence>)a6 : null);
          for ( ; 0 < size6; size6 = in.arrayNext()) {
            for ( ; size6 != 0; size6--) {
              java.lang.CharSequence e6 = (ga6 != null ? ga6.peek() : null);
              e6 = in.readString(e6 instanceof Utf8 ? (Utf8)e6 : null);
              a6.add(e6);
            }
          }
          break;

        case 7:
          long size7 = in.readArrayStart();
          java.util.List<java.lang.Double> a7 = this.artist_longitude;
          if (a7 == null) {
            a7 = new SpecificData.Array<java.lang.Double>((int)size7, SCHEMA$.getField("artist_longitude").schema());
            this.artist_longitude = a7;
          } else a7.clear();
          SpecificData.Array<java.lang.Double> ga7 = (a7 instanceof SpecificData.Array ? (SpecificData.Array<java.lang.Double>)a7 : null);
          for ( ; 0 < size7; size7 = in.arrayNext()) {
            for ( ; size7 != 0; size7--) {
              java.lang.Double e7 = (ga7 != null ? ga7.peek() : null);
              e7 = in.readDouble();
              a7.add(e7);
            }
          }
          break;

        case 8:
          long size8 = in.readArrayStart();
          java.util.List<java.lang.CharSequence> a8 = this.artist_mbid;
          if (a8 == null) {
            a8 = new SpecificData.Array<java.lang.CharSequence>((int)size8, SCHEMA$.getField("artist_mbid").schema());
            this.artist_mbid = a8;
          } else a8.clear();
          SpecificData.Array<java.lang.CharSequence> ga8 = (a8 instanceof SpecificData.Array ? (SpecificData.Array<java.lang.CharSequence>)a8 : null);
          for ( ; 0 < size8; size8 = in.arrayNext()) {
            for ( ; size8 != 0; size8--) {
              java.lang.CharSequence e8 = (ga8 != null ? ga8.peek() : null);
              e8 = in.readString(e8 instanceof Utf8 ? (Utf8)e8 : null);
              a8.add(e8);
            }
          }
          break;

        case 9:
          long size9 = in.readArrayStart();
          java.util.List<java.lang.CharSequence> a9 = this.artist_name;
          if (a9 == null) {
            a9 = new SpecificData.Array<java.lang.CharSequence>((int)size9, SCHEMA$.getField("artist_name").schema());
            this.artist_name = a9;
          } else a9.clear();
          SpecificData.Array<java.lang.CharSequence> ga9 = (a9 instanceof SpecificData.Array ? (SpecificData.Array<java.lang.CharSequence>)a9 : null);
          for ( ; 0 < size9; size9 = in.arrayNext()) {
            for ( ; size9 != 0; size9--) {
              java.lang.CharSequence e9 = (ga9 != null ? ga9.peek() : null);
              e9 = in.readString(e9 instanceof Utf8 ? (Utf8)e9 : null);
              a9.add(e9);
            }
          }
          break;

        case 10:
          if (in.readIndex() != 1) {
            in.readNull();
            this.artist_playmeid = null;
          } else {
            long size10 = in.readArrayStart();
            java.util.List<java.lang.Integer> a10 = this.artist_playmeid;
            if (a10 == null) {
              a10 = new SpecificData.Array<java.lang.Integer>((int)size10, SCHEMA$.getField("artist_playmeid").schema().getTypes().get(1));
              this.artist_playmeid = a10;
            } else a10.clear();
            SpecificData.Array<java.lang.Integer> ga10 = (a10 instanceof SpecificData.Array ? (SpecificData.Array<java.lang.Integer>)a10 : null);
            for ( ; 0 < size10; size10 = in.arrayNext()) {
              for ( ; size10 != 0; size10--) {
                java.lang.Integer e10 = (ga10 != null ? ga10.peek() : null);
                e10 = in.readInt();
                a10.add(e10);
              }
            }
          }
          break;

        case 11:
          long size11 = in.readArrayStart();
          java.util.List<java.lang.CharSequence> a11 = this.genre;
          if (a11 == null) {
            a11 = new SpecificData.Array<java.lang.CharSequence>((int)size11, SCHEMA$.getField("genre").schema());
            this.genre = a11;
          } else a11.clear();
          SpecificData.Array<java.lang.CharSequence> ga11 = (a11 instanceof SpecificData.Array ? (SpecificData.Array<java.lang.CharSequence>)a11 : null);
          for ( ; 0 < size11; size11 = in.arrayNext()) {
            for ( ; size11 != 0; size11--) {
              java.lang.CharSequence e11 = (ga11 != null ? ga11.peek() : null);
              e11 = in.readString(e11 instanceof Utf8 ? (Utf8)e11 : null);
              a11.add(e11);
            }
          }
          break;

        case 12:
          if (in.readIndex() != 1) {
            in.readNull();
            this.idx_artist_terms = null;
          } else {
            long size12 = in.readArrayStart();
            java.util.List<java.lang.Integer> a12 = this.idx_artist_terms;
            if (a12 == null) {
              a12 = new SpecificData.Array<java.lang.Integer>((int)size12, SCHEMA$.getField("idx_artist_terms").schema().getTypes().get(1));
              this.idx_artist_terms = a12;
            } else a12.clear();
            SpecificData.Array<java.lang.Integer> ga12 = (a12 instanceof SpecificData.Array ? (SpecificData.Array<java.lang.Integer>)a12 : null);
            for ( ; 0 < size12; size12 = in.arrayNext()) {
              for ( ; size12 != 0; size12--) {
                java.lang.Integer e12 = (ga12 != null ? ga12.peek() : null);
                e12 = in.readInt();
                a12.add(e12);
              }
            }
          }
          break;

        case 13:
          if (in.readIndex() != 1) {
            in.readNull();
            this.idx_similar_artists = null;
          } else {
            long size13 = in.readArrayStart();
            java.util.List<java.lang.Integer> a13 = this.idx_similar_artists;
            if (a13 == null) {
              a13 = new SpecificData.Array<java.lang.Integer>((int)size13, SCHEMA$.getField("idx_similar_artists").schema().getTypes().get(1));
              this.idx_similar_artists = a13;
            } else a13.clear();
            SpecificData.Array<java.lang.Integer> ga13 = (a13 instanceof SpecificData.Array ? (SpecificData.Array<java.lang.Integer>)a13 : null);
            for ( ; 0 < size13; size13 = in.arrayNext()) {
              for ( ; size13 != 0; size13--) {
                java.lang.Integer e13 = (ga13 != null ? ga13.peek() : null);
                e13 = in.readInt();
                a13.add(e13);
              }
            }
          }
          break;

        case 14:
          long size14 = in.readArrayStart();
          java.util.List<java.lang.CharSequence> a14 = this.release;
          if (a14 == null) {
            a14 = new SpecificData.Array<java.lang.CharSequence>((int)size14, SCHEMA$.getField("release").schema());
            this.release = a14;
          } else a14.clear();
          SpecificData.Array<java.lang.CharSequence> ga14 = (a14 instanceof SpecificData.Array ? (SpecificData.Array<java.lang.CharSequence>)a14 : null);
          for ( ; 0 < size14; size14 = in.arrayNext()) {
            for ( ; size14 != 0; size14--) {
              java.lang.CharSequence e14 = (ga14 != null ? ga14.peek() : null);
              e14 = in.readString(e14 instanceof Utf8 ? (Utf8)e14 : null);
              a14.add(e14);
            }
          }
          break;

        case 15:
          if (in.readIndex() != 0) {
            in.readNull();
            this.release_7digitalid = null;
          } else {
            long size15 = in.readArrayStart();
            java.util.List<java.lang.Integer> a15 = this.release_7digitalid;
            if (a15 == null) {
              a15 = new SpecificData.Array<java.lang.Integer>((int)size15, SCHEMA$.getField("release_7digitalid").schema().getTypes().get(0));
              this.release_7digitalid = a15;
            } else a15.clear();
            SpecificData.Array<java.lang.Integer> ga15 = (a15 instanceof SpecificData.Array ? (SpecificData.Array<java.lang.Integer>)a15 : null);
            for ( ; 0 < size15; size15 = in.arrayNext()) {
              for ( ; size15 != 0; size15--) {
                java.lang.Integer e15 = (ga15 != null ? ga15.peek() : null);
                e15 = in.readInt();
                a15.add(e15);
              }
            }
          }
          break;

        case 16:
          long size16 = in.readArrayStart();
          java.util.List<java.lang.Double> a16 = this.song_hotttnesss;
          if (a16 == null) {
            a16 = new SpecificData.Array<java.lang.Double>((int)size16, SCHEMA$.getField("song_hotttnesss").schema());
            this.song_hotttnesss = a16;
          } else a16.clear();
          SpecificData.Array<java.lang.Double> ga16 = (a16 instanceof SpecificData.Array ? (SpecificData.Array<java.lang.Double>)a16 : null);
          for ( ; 0 < size16; size16 = in.arrayNext()) {
            for ( ; size16 != 0; size16--) {
              java.lang.Double e16 = (ga16 != null ? ga16.peek() : null);
              e16 = in.readDouble();
              a16.add(e16);
            }
          }
          break;

        case 17:
          long size17 = in.readArrayStart();
          java.util.List<java.lang.CharSequence> a17 = this.song_id;
          if (a17 == null) {
            a17 = new SpecificData.Array<java.lang.CharSequence>((int)size17, SCHEMA$.getField("song_id").schema());
            this.song_id = a17;
          } else a17.clear();
          SpecificData.Array<java.lang.CharSequence> ga17 = (a17 instanceof SpecificData.Array ? (SpecificData.Array<java.lang.CharSequence>)a17 : null);
          for ( ; 0 < size17; size17 = in.arrayNext()) {
            for ( ; size17 != 0; size17--) {
              java.lang.CharSequence e17 = (ga17 != null ? ga17.peek() : null);
              e17 = in.readString(e17 instanceof Utf8 ? (Utf8)e17 : null);
              a17.add(e17);
            }
          }
          break;

        case 18:
          long size18 = in.readArrayStart();
          java.util.List<java.lang.CharSequence> a18 = this.title;
          if (a18 == null) {
            a18 = new SpecificData.Array<java.lang.CharSequence>((int)size18, SCHEMA$.getField("title").schema());
            this.title = a18;
          } else a18.clear();
          SpecificData.Array<java.lang.CharSequence> ga18 = (a18 instanceof SpecificData.Array ? (SpecificData.Array<java.lang.CharSequence>)a18 : null);
          for ( ; 0 < size18; size18 = in.arrayNext()) {
            for ( ; size18 != 0; size18--) {
              java.lang.CharSequence e18 = (ga18 != null ? ga18.peek() : null);
              e18 = in.readString(e18 instanceof Utf8 ? (Utf8)e18 : null);
              a18.add(e18);
            }
          }
          break;

        case 19:
          if (in.readIndex() != 1) {
            in.readNull();
            this.track_7digitalid = null;
          } else {
            long size19 = in.readArrayStart();
            java.util.List<java.lang.Integer> a19 = this.track_7digitalid;
            if (a19 == null) {
              a19 = new SpecificData.Array<java.lang.Integer>((int)size19, SCHEMA$.getField("track_7digitalid").schema().getTypes().get(1));
              this.track_7digitalid = a19;
            } else a19.clear();
            SpecificData.Array<java.lang.Integer> ga19 = (a19 instanceof SpecificData.Array ? (SpecificData.Array<java.lang.Integer>)a19 : null);
            for ( ; 0 < size19; size19 = in.arrayNext()) {
              for ( ; size19 != 0; size19--) {
                java.lang.Integer e19 = (ga19 != null ? ga19.peek() : null);
                e19 = in.readInt();
                a19.add(e19);
              }
            }
          }
          break;

        default:
          throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}










