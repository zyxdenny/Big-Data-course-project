/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package song_summary.avro;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@org.apache.avro.specific.AvroGenerated
public class song_avro extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 6797524489109436149L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"song_avro\",\"namespace\":\"song_summary.avro\",\"fields\":[{\"name\":\"year\",\"type\":\"int\"},{\"name\":\"song_hotttnesss\",\"type\":[\"null\",\"double\"]},{\"name\":\"duration\",\"type\":\"double\"},{\"name\":\"energy\",\"type\":\"double\"},{\"name\":\"tempo\",\"type\":\"double\"},{\"name\":\"title\",\"type\":\"string\"},{\"name\":\"release\",\"type\":\"string\"},{\"name\":\"artist_name\",\"type\":\"string\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<song_avro> ENCODER =
      new BinaryMessageEncoder<song_avro>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<song_avro> DECODER =
      new BinaryMessageDecoder<song_avro>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<song_avro> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<song_avro> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<song_avro> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<song_avro>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this song_avro to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a song_avro from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a song_avro instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static song_avro fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

   private int year;
   private java.lang.Double song_hotttnesss;
   private double duration;
   private double energy;
   private double tempo;
   private java.lang.CharSequence title;
   private java.lang.CharSequence release;
   private java.lang.CharSequence artist_name;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public song_avro() {}

  /**
   * All-args constructor.
   * @param year The new value for year
   * @param song_hotttnesss The new value for song_hotttnesss
   * @param duration The new value for duration
   * @param energy The new value for energy
   * @param tempo The new value for tempo
   * @param title The new value for title
   * @param release The new value for release
   * @param artist_name The new value for artist_name
   */
  public song_avro(java.lang.Integer year, java.lang.Double song_hotttnesss, java.lang.Double duration, java.lang.Double energy, java.lang.Double tempo, java.lang.CharSequence title, java.lang.CharSequence release, java.lang.CharSequence artist_name) {
    this.year = year;
    this.song_hotttnesss = song_hotttnesss;
    this.duration = duration;
    this.energy = energy;
    this.tempo = tempo;
    this.title = title;
    this.release = release;
    this.artist_name = artist_name;
  }

  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return year;
    case 1: return song_hotttnesss;
    case 2: return duration;
    case 3: return energy;
    case 4: return tempo;
    case 5: return title;
    case 6: return release;
    case 7: return artist_name;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: year = (java.lang.Integer)value$; break;
    case 1: song_hotttnesss = (java.lang.Double)value$; break;
    case 2: duration = (java.lang.Double)value$; break;
    case 3: energy = (java.lang.Double)value$; break;
    case 4: tempo = (java.lang.Double)value$; break;
    case 5: title = (java.lang.CharSequence)value$; break;
    case 6: release = (java.lang.CharSequence)value$; break;
    case 7: artist_name = (java.lang.CharSequence)value$; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'year' field.
   * @return The value of the 'year' field.
   */
  public int getYear() {
    return year;
  }


  /**
   * Sets the value of the 'year' field.
   * @param value the value to set.
   */
  public void setYear(int value) {
    this.year = value;
  }

  /**
   * Gets the value of the 'song_hotttnesss' field.
   * @return The value of the 'song_hotttnesss' field.
   */
  public java.lang.Double getSongHotttnesss() {
    return song_hotttnesss;
  }


  /**
   * Sets the value of the 'song_hotttnesss' field.
   * @param value the value to set.
   */
  public void setSongHotttnesss(java.lang.Double value) {
    this.song_hotttnesss = value;
  }

  /**
   * Gets the value of the 'duration' field.
   * @return The value of the 'duration' field.
   */
  public double getDuration() {
    return duration;
  }


  /**
   * Sets the value of the 'duration' field.
   * @param value the value to set.
   */
  public void setDuration(double value) {
    this.duration = value;
  }

  /**
   * Gets the value of the 'energy' field.
   * @return The value of the 'energy' field.
   */
  public double getEnergy() {
    return energy;
  }


  /**
   * Sets the value of the 'energy' field.
   * @param value the value to set.
   */
  public void setEnergy(double value) {
    this.energy = value;
  }

  /**
   * Gets the value of the 'tempo' field.
   * @return The value of the 'tempo' field.
   */
  public double getTempo() {
    return tempo;
  }


  /**
   * Sets the value of the 'tempo' field.
   * @param value the value to set.
   */
  public void setTempo(double value) {
    this.tempo = value;
  }

  /**
   * Gets the value of the 'title' field.
   * @return The value of the 'title' field.
   */
  public java.lang.CharSequence getTitle() {
    return title;
  }


  /**
   * Sets the value of the 'title' field.
   * @param value the value to set.
   */
  public void setTitle(java.lang.CharSequence value) {
    this.title = value;
  }

  /**
   * Gets the value of the 'release' field.
   * @return The value of the 'release' field.
   */
  public java.lang.CharSequence getRelease() {
    return release;
  }


  /**
   * Sets the value of the 'release' field.
   * @param value the value to set.
   */
  public void setRelease(java.lang.CharSequence value) {
    this.release = value;
  }

  /**
   * Gets the value of the 'artist_name' field.
   * @return The value of the 'artist_name' field.
   */
  public java.lang.CharSequence getArtistName() {
    return artist_name;
  }


  /**
   * Sets the value of the 'artist_name' field.
   * @param value the value to set.
   */
  public void setArtistName(java.lang.CharSequence value) {
    this.artist_name = value;
  }

  /**
   * Creates a new song_avro RecordBuilder.
   * @return A new song_avro RecordBuilder
   */
  public static song_summary.avro.song_avro.Builder newBuilder() {
    return new song_summary.avro.song_avro.Builder();
  }

  /**
   * Creates a new song_avro RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new song_avro RecordBuilder
   */
  public static song_summary.avro.song_avro.Builder newBuilder(song_summary.avro.song_avro.Builder other) {
    if (other == null) {
      return new song_summary.avro.song_avro.Builder();
    } else {
      return new song_summary.avro.song_avro.Builder(other);
    }
  }

  /**
   * Creates a new song_avro RecordBuilder by copying an existing song_avro instance.
   * @param other The existing instance to copy.
   * @return A new song_avro RecordBuilder
   */
  public static song_summary.avro.song_avro.Builder newBuilder(song_summary.avro.song_avro other) {
    if (other == null) {
      return new song_summary.avro.song_avro.Builder();
    } else {
      return new song_summary.avro.song_avro.Builder(other);
    }
  }

  /**
   * RecordBuilder for song_avro instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<song_avro>
    implements org.apache.avro.data.RecordBuilder<song_avro> {

    private int year;
    private java.lang.Double song_hotttnesss;
    private double duration;
    private double energy;
    private double tempo;
    private java.lang.CharSequence title;
    private java.lang.CharSequence release;
    private java.lang.CharSequence artist_name;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(song_summary.avro.song_avro.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.year)) {
        this.year = data().deepCopy(fields()[0].schema(), other.year);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.song_hotttnesss)) {
        this.song_hotttnesss = data().deepCopy(fields()[1].schema(), other.song_hotttnesss);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.duration)) {
        this.duration = data().deepCopy(fields()[2].schema(), other.duration);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (isValidValue(fields()[3], other.energy)) {
        this.energy = data().deepCopy(fields()[3].schema(), other.energy);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
      if (isValidValue(fields()[4], other.tempo)) {
        this.tempo = data().deepCopy(fields()[4].schema(), other.tempo);
        fieldSetFlags()[4] = other.fieldSetFlags()[4];
      }
      if (isValidValue(fields()[5], other.title)) {
        this.title = data().deepCopy(fields()[5].schema(), other.title);
        fieldSetFlags()[5] = other.fieldSetFlags()[5];
      }
      if (isValidValue(fields()[6], other.release)) {
        this.release = data().deepCopy(fields()[6].schema(), other.release);
        fieldSetFlags()[6] = other.fieldSetFlags()[6];
      }
      if (isValidValue(fields()[7], other.artist_name)) {
        this.artist_name = data().deepCopy(fields()[7].schema(), other.artist_name);
        fieldSetFlags()[7] = other.fieldSetFlags()[7];
      }
    }

    /**
     * Creates a Builder by copying an existing song_avro instance
     * @param other The existing instance to copy.
     */
    private Builder(song_summary.avro.song_avro other) {
      super(SCHEMA$);
      if (isValidValue(fields()[0], other.year)) {
        this.year = data().deepCopy(fields()[0].schema(), other.year);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.song_hotttnesss)) {
        this.song_hotttnesss = data().deepCopy(fields()[1].schema(), other.song_hotttnesss);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.duration)) {
        this.duration = data().deepCopy(fields()[2].schema(), other.duration);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.energy)) {
        this.energy = data().deepCopy(fields()[3].schema(), other.energy);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.tempo)) {
        this.tempo = data().deepCopy(fields()[4].schema(), other.tempo);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.title)) {
        this.title = data().deepCopy(fields()[5].schema(), other.title);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.release)) {
        this.release = data().deepCopy(fields()[6].schema(), other.release);
        fieldSetFlags()[6] = true;
      }
      if (isValidValue(fields()[7], other.artist_name)) {
        this.artist_name = data().deepCopy(fields()[7].schema(), other.artist_name);
        fieldSetFlags()[7] = true;
      }
    }

    /**
      * Gets the value of the 'year' field.
      * @return The value.
      */
    public int getYear() {
      return year;
    }


    /**
      * Sets the value of the 'year' field.
      * @param value The value of 'year'.
      * @return This builder.
      */
    public song_summary.avro.song_avro.Builder setYear(int value) {
      validate(fields()[0], value);
      this.year = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'year' field has been set.
      * @return True if the 'year' field has been set, false otherwise.
      */
    public boolean hasYear() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'year' field.
      * @return This builder.
      */
    public song_summary.avro.song_avro.Builder clearYear() {
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'song_hotttnesss' field.
      * @return The value.
      */
    public java.lang.Double getSongHotttnesss() {
      return song_hotttnesss;
    }


    /**
      * Sets the value of the 'song_hotttnesss' field.
      * @param value The value of 'song_hotttnesss'.
      * @return This builder.
      */
    public song_summary.avro.song_avro.Builder setSongHotttnesss(java.lang.Double value) {
      validate(fields()[1], value);
      this.song_hotttnesss = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'song_hotttnesss' field has been set.
      * @return True if the 'song_hotttnesss' field has been set, false otherwise.
      */
    public boolean hasSongHotttnesss() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'song_hotttnesss' field.
      * @return This builder.
      */
    public song_summary.avro.song_avro.Builder clearSongHotttnesss() {
      song_hotttnesss = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'duration' field.
      * @return The value.
      */
    public double getDuration() {
      return duration;
    }


    /**
      * Sets the value of the 'duration' field.
      * @param value The value of 'duration'.
      * @return This builder.
      */
    public song_summary.avro.song_avro.Builder setDuration(double value) {
      validate(fields()[2], value);
      this.duration = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'duration' field has been set.
      * @return True if the 'duration' field has been set, false otherwise.
      */
    public boolean hasDuration() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'duration' field.
      * @return This builder.
      */
    public song_summary.avro.song_avro.Builder clearDuration() {
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'energy' field.
      * @return The value.
      */
    public double getEnergy() {
      return energy;
    }


    /**
      * Sets the value of the 'energy' field.
      * @param value The value of 'energy'.
      * @return This builder.
      */
    public song_summary.avro.song_avro.Builder setEnergy(double value) {
      validate(fields()[3], value);
      this.energy = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'energy' field has been set.
      * @return True if the 'energy' field has been set, false otherwise.
      */
    public boolean hasEnergy() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'energy' field.
      * @return This builder.
      */
    public song_summary.avro.song_avro.Builder clearEnergy() {
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'tempo' field.
      * @return The value.
      */
    public double getTempo() {
      return tempo;
    }


    /**
      * Sets the value of the 'tempo' field.
      * @param value The value of 'tempo'.
      * @return This builder.
      */
    public song_summary.avro.song_avro.Builder setTempo(double value) {
      validate(fields()[4], value);
      this.tempo = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'tempo' field has been set.
      * @return True if the 'tempo' field has been set, false otherwise.
      */
    public boolean hasTempo() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'tempo' field.
      * @return This builder.
      */
    public song_summary.avro.song_avro.Builder clearTempo() {
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'title' field.
      * @return The value.
      */
    public java.lang.CharSequence getTitle() {
      return title;
    }


    /**
      * Sets the value of the 'title' field.
      * @param value The value of 'title'.
      * @return This builder.
      */
    public song_summary.avro.song_avro.Builder setTitle(java.lang.CharSequence value) {
      validate(fields()[5], value);
      this.title = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'title' field has been set.
      * @return True if the 'title' field has been set, false otherwise.
      */
    public boolean hasTitle() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'title' field.
      * @return This builder.
      */
    public song_summary.avro.song_avro.Builder clearTitle() {
      title = null;
      fieldSetFlags()[5] = false;
      return this;
    }

    /**
      * Gets the value of the 'release' field.
      * @return The value.
      */
    public java.lang.CharSequence getRelease() {
      return release;
    }


    /**
      * Sets the value of the 'release' field.
      * @param value The value of 'release'.
      * @return This builder.
      */
    public song_summary.avro.song_avro.Builder setRelease(java.lang.CharSequence value) {
      validate(fields()[6], value);
      this.release = value;
      fieldSetFlags()[6] = true;
      return this;
    }

    /**
      * Checks whether the 'release' field has been set.
      * @return True if the 'release' field has been set, false otherwise.
      */
    public boolean hasRelease() {
      return fieldSetFlags()[6];
    }


    /**
      * Clears the value of the 'release' field.
      * @return This builder.
      */
    public song_summary.avro.song_avro.Builder clearRelease() {
      release = null;
      fieldSetFlags()[6] = false;
      return this;
    }

    /**
      * Gets the value of the 'artist_name' field.
      * @return The value.
      */
    public java.lang.CharSequence getArtistName() {
      return artist_name;
    }


    /**
      * Sets the value of the 'artist_name' field.
      * @param value The value of 'artist_name'.
      * @return This builder.
      */
    public song_summary.avro.song_avro.Builder setArtistName(java.lang.CharSequence value) {
      validate(fields()[7], value);
      this.artist_name = value;
      fieldSetFlags()[7] = true;
      return this;
    }

    /**
      * Checks whether the 'artist_name' field has been set.
      * @return True if the 'artist_name' field has been set, false otherwise.
      */
    public boolean hasArtistName() {
      return fieldSetFlags()[7];
    }


    /**
      * Clears the value of the 'artist_name' field.
      * @return This builder.
      */
    public song_summary.avro.song_avro.Builder clearArtistName() {
      artist_name = null;
      fieldSetFlags()[7] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public song_avro build() {
      try {
        song_avro record = new song_avro();
        record.year = fieldSetFlags()[0] ? this.year : (java.lang.Integer) defaultValue(fields()[0]);
        record.song_hotttnesss = fieldSetFlags()[1] ? this.song_hotttnesss : (java.lang.Double) defaultValue(fields()[1]);
        record.duration = fieldSetFlags()[2] ? this.duration : (java.lang.Double) defaultValue(fields()[2]);
        record.energy = fieldSetFlags()[3] ? this.energy : (java.lang.Double) defaultValue(fields()[3]);
        record.tempo = fieldSetFlags()[4] ? this.tempo : (java.lang.Double) defaultValue(fields()[4]);
        record.title = fieldSetFlags()[5] ? this.title : (java.lang.CharSequence) defaultValue(fields()[5]);
        record.release = fieldSetFlags()[6] ? this.release : (java.lang.CharSequence) defaultValue(fields()[6]);
        record.artist_name = fieldSetFlags()[7] ? this.artist_name : (java.lang.CharSequence) defaultValue(fields()[7]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<song_avro>
    WRITER$ = (org.apache.avro.io.DatumWriter<song_avro>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<song_avro>
    READER$ = (org.apache.avro.io.DatumReader<song_avro>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override protected boolean hasCustomCoders() { return true; }

  @Override public void customEncode(org.apache.avro.io.Encoder out)
    throws java.io.IOException
  {
    out.writeInt(this.year);

    if (this.song_hotttnesss == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      out.writeDouble(this.song_hotttnesss);
    }

    out.writeDouble(this.duration);

    out.writeDouble(this.energy);

    out.writeDouble(this.tempo);

    out.writeString(this.title);

    out.writeString(this.release);

    out.writeString(this.artist_name);

  }

  @Override public void customDecode(org.apache.avro.io.ResolvingDecoder in)
    throws java.io.IOException
  {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      this.year = in.readInt();

      if (in.readIndex() != 1) {
        in.readNull();
        this.song_hotttnesss = null;
      } else {
        this.song_hotttnesss = in.readDouble();
      }

      this.duration = in.readDouble();

      this.energy = in.readDouble();

      this.tempo = in.readDouble();

      this.title = in.readString(this.title instanceof Utf8 ? (Utf8)this.title : null);

      this.release = in.readString(this.release instanceof Utf8 ? (Utf8)this.release : null);

      this.artist_name = in.readString(this.artist_name instanceof Utf8 ? (Utf8)this.artist_name : null);

    } else {
      for (int i = 0; i < 8; i++) {
        switch (fieldOrder[i].pos()) {
        case 0:
          this.year = in.readInt();
          break;

        case 1:
          if (in.readIndex() != 1) {
            in.readNull();
            this.song_hotttnesss = null;
          } else {
            this.song_hotttnesss = in.readDouble();
          }
          break;

        case 2:
          this.duration = in.readDouble();
          break;

        case 3:
          this.energy = in.readDouble();
          break;

        case 4:
          this.tempo = in.readDouble();
          break;

        case 5:
          this.title = in.readString(this.title instanceof Utf8 ? (Utf8)this.title : null);
          break;

        case 6:
          this.release = in.readString(this.release instanceof Utf8 ? (Utf8)this.release : null);
          break;

        case 7:
          this.artist_name = in.readString(this.artist_name instanceof Utf8 ? (Utf8)this.artist_name : null);
          break;

        default:
          throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}










