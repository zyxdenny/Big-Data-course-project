/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package artists.avro;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@org.apache.avro.specific.AvroGenerated
public class artists_avro extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = 7543468706184314365L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"artists_avro\",\"namespace\":\"artists.avro\",\"fields\":[{\"name\":\"artist_name\",\"type\":\"string\"},{\"name\":\"artist_id\",\"type\":\"string\"},{\"name\":\"artist_hotttnesss\",\"type\":\"double\"},{\"name\":\"similar_artists\",\"type\":[\"null\",{\"type\":\"array\",\"items\":\"string\",\"default\":[]}]},{\"name\":\"artist_familiarity\",\"type\":\"double\"},{\"name\":\"artist_latitude\",\"type\":\"double\"},{\"name\":\"artist_longitude\",\"type\":\"double\"}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<artists_avro> ENCODER =
      new BinaryMessageEncoder<artists_avro>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<artists_avro> DECODER =
      new BinaryMessageDecoder<artists_avro>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<artists_avro> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<artists_avro> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<artists_avro> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<artists_avro>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this artists_avro to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a artists_avro from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a artists_avro instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static artists_avro fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

   private java.lang.CharSequence artist_name;
   private java.lang.CharSequence artist_id;
   private double artist_hotttnesss;
   private java.util.List<java.lang.CharSequence> similar_artists;
   private double artist_familiarity;
   private double artist_latitude;
   private double artist_longitude;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public artists_avro() {}

  /**
   * All-args constructor.
   * @param artist_name The new value for artist_name
   * @param artist_id The new value for artist_id
   * @param artist_hotttnesss The new value for artist_hotttnesss
   * @param similar_artists The new value for similar_artists
   * @param artist_familiarity The new value for artist_familiarity
   * @param artist_latitude The new value for artist_latitude
   * @param artist_longitude The new value for artist_longitude
   */
  public artists_avro(java.lang.CharSequence artist_name, java.lang.CharSequence artist_id, java.lang.Double artist_hotttnesss, java.util.List<java.lang.CharSequence> similar_artists, java.lang.Double artist_familiarity, java.lang.Double artist_latitude, java.lang.Double artist_longitude) {
    this.artist_name = artist_name;
    this.artist_id = artist_id;
    this.artist_hotttnesss = artist_hotttnesss;
    this.similar_artists = similar_artists;
    this.artist_familiarity = artist_familiarity;
    this.artist_latitude = artist_latitude;
    this.artist_longitude = artist_longitude;
  }

  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return artist_name;
    case 1: return artist_id;
    case 2: return artist_hotttnesss;
    case 3: return similar_artists;
    case 4: return artist_familiarity;
    case 5: return artist_latitude;
    case 6: return artist_longitude;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: artist_name = (java.lang.CharSequence)value$; break;
    case 1: artist_id = (java.lang.CharSequence)value$; break;
    case 2: artist_hotttnesss = (java.lang.Double)value$; break;
    case 3: similar_artists = (java.util.List<java.lang.CharSequence>)value$; break;
    case 4: artist_familiarity = (java.lang.Double)value$; break;
    case 5: artist_latitude = (java.lang.Double)value$; break;
    case 6: artist_longitude = (java.lang.Double)value$; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'artist_name' field.
   * @return The value of the 'artist_name' field.
   */
  public java.lang.CharSequence getArtistName() {
    return artist_name;
  }


  /**
   * Sets the value of the 'artist_name' field.
   * @param value the value to set.
   */
  public void setArtistName(java.lang.CharSequence value) {
    this.artist_name = value;
  }

  /**
   * Gets the value of the 'artist_id' field.
   * @return The value of the 'artist_id' field.
   */
  public java.lang.CharSequence getArtistId() {
    return artist_id;
  }


  /**
   * Sets the value of the 'artist_id' field.
   * @param value the value to set.
   */
  public void setArtistId(java.lang.CharSequence value) {
    this.artist_id = value;
  }

  /**
   * Gets the value of the 'artist_hotttnesss' field.
   * @return The value of the 'artist_hotttnesss' field.
   */
  public double getArtistHotttnesss() {
    return artist_hotttnesss;
  }


  /**
   * Sets the value of the 'artist_hotttnesss' field.
   * @param value the value to set.
   */
  public void setArtistHotttnesss(double value) {
    this.artist_hotttnesss = value;
  }

  /**
   * Gets the value of the 'similar_artists' field.
   * @return The value of the 'similar_artists' field.
   */
  public java.util.List<java.lang.CharSequence> getSimilarArtists() {
    return similar_artists;
  }


  /**
   * Sets the value of the 'similar_artists' field.
   * @param value the value to set.
   */
  public void setSimilarArtists(java.util.List<java.lang.CharSequence> value) {
    this.similar_artists = value;
  }

  /**
   * Gets the value of the 'artist_familiarity' field.
   * @return The value of the 'artist_familiarity' field.
   */
  public double getArtistFamiliarity() {
    return artist_familiarity;
  }


  /**
   * Sets the value of the 'artist_familiarity' field.
   * @param value the value to set.
   */
  public void setArtistFamiliarity(double value) {
    this.artist_familiarity = value;
  }

  /**
   * Gets the value of the 'artist_latitude' field.
   * @return The value of the 'artist_latitude' field.
   */
  public double getArtistLatitude() {
    return artist_latitude;
  }


  /**
   * Sets the value of the 'artist_latitude' field.
   * @param value the value to set.
   */
  public void setArtistLatitude(double value) {
    this.artist_latitude = value;
  }

  /**
   * Gets the value of the 'artist_longitude' field.
   * @return The value of the 'artist_longitude' field.
   */
  public double getArtistLongitude() {
    return artist_longitude;
  }


  /**
   * Sets the value of the 'artist_longitude' field.
   * @param value the value to set.
   */
  public void setArtistLongitude(double value) {
    this.artist_longitude = value;
  }

  /**
   * Creates a new artists_avro RecordBuilder.
   * @return A new artists_avro RecordBuilder
   */
  public static artists.avro.artists_avro.Builder newBuilder() {
    return new artists.avro.artists_avro.Builder();
  }

  /**
   * Creates a new artists_avro RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new artists_avro RecordBuilder
   */
  public static artists.avro.artists_avro.Builder newBuilder(artists.avro.artists_avro.Builder other) {
    if (other == null) {
      return new artists.avro.artists_avro.Builder();
    } else {
      return new artists.avro.artists_avro.Builder(other);
    }
  }

  /**
   * Creates a new artists_avro RecordBuilder by copying an existing artists_avro instance.
   * @param other The existing instance to copy.
   * @return A new artists_avro RecordBuilder
   */
  public static artists.avro.artists_avro.Builder newBuilder(artists.avro.artists_avro other) {
    if (other == null) {
      return new artists.avro.artists_avro.Builder();
    } else {
      return new artists.avro.artists_avro.Builder(other);
    }
  }

  /**
   * RecordBuilder for artists_avro instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<artists_avro>
    implements org.apache.avro.data.RecordBuilder<artists_avro> {

    private java.lang.CharSequence artist_name;
    private java.lang.CharSequence artist_id;
    private double artist_hotttnesss;
    private java.util.List<java.lang.CharSequence> similar_artists;
    private double artist_familiarity;
    private double artist_latitude;
    private double artist_longitude;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(artists.avro.artists_avro.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.artist_name)) {
        this.artist_name = data().deepCopy(fields()[0].schema(), other.artist_name);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.artist_id)) {
        this.artist_id = data().deepCopy(fields()[1].schema(), other.artist_id);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
      if (isValidValue(fields()[2], other.artist_hotttnesss)) {
        this.artist_hotttnesss = data().deepCopy(fields()[2].schema(), other.artist_hotttnesss);
        fieldSetFlags()[2] = other.fieldSetFlags()[2];
      }
      if (isValidValue(fields()[3], other.similar_artists)) {
        this.similar_artists = data().deepCopy(fields()[3].schema(), other.similar_artists);
        fieldSetFlags()[3] = other.fieldSetFlags()[3];
      }
      if (isValidValue(fields()[4], other.artist_familiarity)) {
        this.artist_familiarity = data().deepCopy(fields()[4].schema(), other.artist_familiarity);
        fieldSetFlags()[4] = other.fieldSetFlags()[4];
      }
      if (isValidValue(fields()[5], other.artist_latitude)) {
        this.artist_latitude = data().deepCopy(fields()[5].schema(), other.artist_latitude);
        fieldSetFlags()[5] = other.fieldSetFlags()[5];
      }
      if (isValidValue(fields()[6], other.artist_longitude)) {
        this.artist_longitude = data().deepCopy(fields()[6].schema(), other.artist_longitude);
        fieldSetFlags()[6] = other.fieldSetFlags()[6];
      }
    }

    /**
     * Creates a Builder by copying an existing artists_avro instance
     * @param other The existing instance to copy.
     */
    private Builder(artists.avro.artists_avro other) {
      super(SCHEMA$);
      if (isValidValue(fields()[0], other.artist_name)) {
        this.artist_name = data().deepCopy(fields()[0].schema(), other.artist_name);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.artist_id)) {
        this.artist_id = data().deepCopy(fields()[1].schema(), other.artist_id);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.artist_hotttnesss)) {
        this.artist_hotttnesss = data().deepCopy(fields()[2].schema(), other.artist_hotttnesss);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.similar_artists)) {
        this.similar_artists = data().deepCopy(fields()[3].schema(), other.similar_artists);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.artist_familiarity)) {
        this.artist_familiarity = data().deepCopy(fields()[4].schema(), other.artist_familiarity);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.artist_latitude)) {
        this.artist_latitude = data().deepCopy(fields()[5].schema(), other.artist_latitude);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.artist_longitude)) {
        this.artist_longitude = data().deepCopy(fields()[6].schema(), other.artist_longitude);
        fieldSetFlags()[6] = true;
      }
    }

    /**
      * Gets the value of the 'artist_name' field.
      * @return The value.
      */
    public java.lang.CharSequence getArtistName() {
      return artist_name;
    }


    /**
      * Sets the value of the 'artist_name' field.
      * @param value The value of 'artist_name'.
      * @return This builder.
      */
    public artists.avro.artists_avro.Builder setArtistName(java.lang.CharSequence value) {
      validate(fields()[0], value);
      this.artist_name = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'artist_name' field has been set.
      * @return True if the 'artist_name' field has been set, false otherwise.
      */
    public boolean hasArtistName() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'artist_name' field.
      * @return This builder.
      */
    public artists.avro.artists_avro.Builder clearArtistName() {
      artist_name = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'artist_id' field.
      * @return The value.
      */
    public java.lang.CharSequence getArtistId() {
      return artist_id;
    }


    /**
      * Sets the value of the 'artist_id' field.
      * @param value The value of 'artist_id'.
      * @return This builder.
      */
    public artists.avro.artists_avro.Builder setArtistId(java.lang.CharSequence value) {
      validate(fields()[1], value);
      this.artist_id = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'artist_id' field has been set.
      * @return True if the 'artist_id' field has been set, false otherwise.
      */
    public boolean hasArtistId() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'artist_id' field.
      * @return This builder.
      */
    public artists.avro.artists_avro.Builder clearArtistId() {
      artist_id = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'artist_hotttnesss' field.
      * @return The value.
      */
    public double getArtistHotttnesss() {
      return artist_hotttnesss;
    }


    /**
      * Sets the value of the 'artist_hotttnesss' field.
      * @param value The value of 'artist_hotttnesss'.
      * @return This builder.
      */
    public artists.avro.artists_avro.Builder setArtistHotttnesss(double value) {
      validate(fields()[2], value);
      this.artist_hotttnesss = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'artist_hotttnesss' field has been set.
      * @return True if the 'artist_hotttnesss' field has been set, false otherwise.
      */
    public boolean hasArtistHotttnesss() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'artist_hotttnesss' field.
      * @return This builder.
      */
    public artists.avro.artists_avro.Builder clearArtistHotttnesss() {
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'similar_artists' field.
      * @return The value.
      */
    public java.util.List<java.lang.CharSequence> getSimilarArtists() {
      return similar_artists;
    }


    /**
      * Sets the value of the 'similar_artists' field.
      * @param value The value of 'similar_artists'.
      * @return This builder.
      */
    public artists.avro.artists_avro.Builder setSimilarArtists(java.util.List<java.lang.CharSequence> value) {
      validate(fields()[3], value);
      this.similar_artists = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'similar_artists' field has been set.
      * @return True if the 'similar_artists' field has been set, false otherwise.
      */
    public boolean hasSimilarArtists() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'similar_artists' field.
      * @return This builder.
      */
    public artists.avro.artists_avro.Builder clearSimilarArtists() {
      similar_artists = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'artist_familiarity' field.
      * @return The value.
      */
    public double getArtistFamiliarity() {
      return artist_familiarity;
    }


    /**
      * Sets the value of the 'artist_familiarity' field.
      * @param value The value of 'artist_familiarity'.
      * @return This builder.
      */
    public artists.avro.artists_avro.Builder setArtistFamiliarity(double value) {
      validate(fields()[4], value);
      this.artist_familiarity = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'artist_familiarity' field has been set.
      * @return True if the 'artist_familiarity' field has been set, false otherwise.
      */
    public boolean hasArtistFamiliarity() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'artist_familiarity' field.
      * @return This builder.
      */
    public artists.avro.artists_avro.Builder clearArtistFamiliarity() {
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'artist_latitude' field.
      * @return The value.
      */
    public double getArtistLatitude() {
      return artist_latitude;
    }


    /**
      * Sets the value of the 'artist_latitude' field.
      * @param value The value of 'artist_latitude'.
      * @return This builder.
      */
    public artists.avro.artists_avro.Builder setArtistLatitude(double value) {
      validate(fields()[5], value);
      this.artist_latitude = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'artist_latitude' field has been set.
      * @return True if the 'artist_latitude' field has been set, false otherwise.
      */
    public boolean hasArtistLatitude() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'artist_latitude' field.
      * @return This builder.
      */
    public artists.avro.artists_avro.Builder clearArtistLatitude() {
      fieldSetFlags()[5] = false;
      return this;
    }

    /**
      * Gets the value of the 'artist_longitude' field.
      * @return The value.
      */
    public double getArtistLongitude() {
      return artist_longitude;
    }


    /**
      * Sets the value of the 'artist_longitude' field.
      * @param value The value of 'artist_longitude'.
      * @return This builder.
      */
    public artists.avro.artists_avro.Builder setArtistLongitude(double value) {
      validate(fields()[6], value);
      this.artist_longitude = value;
      fieldSetFlags()[6] = true;
      return this;
    }

    /**
      * Checks whether the 'artist_longitude' field has been set.
      * @return True if the 'artist_longitude' field has been set, false otherwise.
      */
    public boolean hasArtistLongitude() {
      return fieldSetFlags()[6];
    }


    /**
      * Clears the value of the 'artist_longitude' field.
      * @return This builder.
      */
    public artists.avro.artists_avro.Builder clearArtistLongitude() {
      fieldSetFlags()[6] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public artists_avro build() {
      try {
        artists_avro record = new artists_avro();
        record.artist_name = fieldSetFlags()[0] ? this.artist_name : (java.lang.CharSequence) defaultValue(fields()[0]);
        record.artist_id = fieldSetFlags()[1] ? this.artist_id : (java.lang.CharSequence) defaultValue(fields()[1]);
        record.artist_hotttnesss = fieldSetFlags()[2] ? this.artist_hotttnesss : (java.lang.Double) defaultValue(fields()[2]);
        record.similar_artists = fieldSetFlags()[3] ? this.similar_artists : (java.util.List<java.lang.CharSequence>) defaultValue(fields()[3]);
        record.artist_familiarity = fieldSetFlags()[4] ? this.artist_familiarity : (java.lang.Double) defaultValue(fields()[4]);
        record.artist_latitude = fieldSetFlags()[5] ? this.artist_latitude : (java.lang.Double) defaultValue(fields()[5]);
        record.artist_longitude = fieldSetFlags()[6] ? this.artist_longitude : (java.lang.Double) defaultValue(fields()[6]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<artists_avro>
    WRITER$ = (org.apache.avro.io.DatumWriter<artists_avro>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<artists_avro>
    READER$ = (org.apache.avro.io.DatumReader<artists_avro>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

  @Override protected boolean hasCustomCoders() { return true; }

  @Override public void customEncode(org.apache.avro.io.Encoder out)
    throws java.io.IOException
  {
    out.writeString(this.artist_name);

    out.writeString(this.artist_id);

    out.writeDouble(this.artist_hotttnesss);

    if (this.similar_artists == null) {
      out.writeIndex(0);
      out.writeNull();
    } else {
      out.writeIndex(1);
      long size0 = this.similar_artists.size();
      out.writeArrayStart();
      out.setItemCount(size0);
      long actualSize0 = 0;
      for (java.lang.CharSequence e0: this.similar_artists) {
        actualSize0++;
        out.startItem();
        out.writeString(e0);
      }
      out.writeArrayEnd();
      if (actualSize0 != size0)
        throw new java.util.ConcurrentModificationException("Array-size written was " + size0 + ", but element count was " + actualSize0 + ".");
    }

    out.writeDouble(this.artist_familiarity);

    out.writeDouble(this.artist_latitude);

    out.writeDouble(this.artist_longitude);

  }

  @Override public void customDecode(org.apache.avro.io.ResolvingDecoder in)
    throws java.io.IOException
  {
    org.apache.avro.Schema.Field[] fieldOrder = in.readFieldOrderIfDiff();
    if (fieldOrder == null) {
      this.artist_name = in.readString(this.artist_name instanceof Utf8 ? (Utf8)this.artist_name : null);

      this.artist_id = in.readString(this.artist_id instanceof Utf8 ? (Utf8)this.artist_id : null);

      this.artist_hotttnesss = in.readDouble();

      if (in.readIndex() != 1) {
        in.readNull();
        this.similar_artists = null;
      } else {
        long size0 = in.readArrayStart();
        java.util.List<java.lang.CharSequence> a0 = this.similar_artists;
        if (a0 == null) {
          a0 = new SpecificData.Array<java.lang.CharSequence>((int)size0, SCHEMA$.getField("similar_artists").schema().getTypes().get(1));
          this.similar_artists = a0;
        } else a0.clear();
        SpecificData.Array<java.lang.CharSequence> ga0 = (a0 instanceof SpecificData.Array ? (SpecificData.Array<java.lang.CharSequence>)a0 : null);
        for ( ; 0 < size0; size0 = in.arrayNext()) {
          for ( ; size0 != 0; size0--) {
            java.lang.CharSequence e0 = (ga0 != null ? ga0.peek() : null);
            e0 = in.readString(e0 instanceof Utf8 ? (Utf8)e0 : null);
            a0.add(e0);
          }
        }
      }

      this.artist_familiarity = in.readDouble();

      this.artist_latitude = in.readDouble();

      this.artist_longitude = in.readDouble();

    } else {
      for (int i = 0; i < 7; i++) {
        switch (fieldOrder[i].pos()) {
        case 0:
          this.artist_name = in.readString(this.artist_name instanceof Utf8 ? (Utf8)this.artist_name : null);
          break;

        case 1:
          this.artist_id = in.readString(this.artist_id instanceof Utf8 ? (Utf8)this.artist_id : null);
          break;

        case 2:
          this.artist_hotttnesss = in.readDouble();
          break;

        case 3:
          if (in.readIndex() != 1) {
            in.readNull();
            this.similar_artists = null;
          } else {
            long size0 = in.readArrayStart();
            java.util.List<java.lang.CharSequence> a0 = this.similar_artists;
            if (a0 == null) {
              a0 = new SpecificData.Array<java.lang.CharSequence>((int)size0, SCHEMA$.getField("similar_artists").schema().getTypes().get(1));
              this.similar_artists = a0;
            } else a0.clear();
            SpecificData.Array<java.lang.CharSequence> ga0 = (a0 instanceof SpecificData.Array ? (SpecificData.Array<java.lang.CharSequence>)a0 : null);
            for ( ; 0 < size0; size0 = in.arrayNext()) {
              for ( ; size0 != 0; size0--) {
                java.lang.CharSequence e0 = (ga0 != null ? ga0.peek() : null);
                e0 = in.readString(e0 instanceof Utf8 ? (Utf8)e0 : null);
                a0.add(e0);
              }
            }
          }
          break;

        case 4:
          this.artist_familiarity = in.readDouble();
          break;

        case 5:
          this.artist_latitude = in.readDouble();
          break;

        case 6:
          this.artist_longitude = in.readDouble();
          break;

        default:
          throw new java.io.IOException("Corrupt ResolvingDecoder.");
        }
      }
    }
  }
}










